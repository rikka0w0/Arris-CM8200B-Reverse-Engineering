# This Makefile assists in creating the chipimages contents by building
# the ROM table and ROM library and copying the built files to their
# permanent chipimages location.  It is useful only during ROM library
# development and testing, not after tapeout.
#
# NOTE: the boot loader, if any, is rebuilt by this script
# from components/chips/images/usbrdl/$(CHIP) and
# is picked up by the ROM library build from the same path

ROOT_DIR := $(abspath $(CURDIR)/../../../../..)
SRC := $(ROOT_DIR)/src

BLDDIR := $(ROOT_DIR)/build/dongle
ROMLDIR := $(SRC)/dongle/make/roml/$(CHIP)
ROML_SUPPORT_BASE_DIR := $(SRC)/dongle/roml
ROML_SUPPORT_DIR := $(SRC)/dongle/roml/$(CHIP)
ROML_IMAGES_BASE_DIR := $(ROOT_DIR)/components/chips/images/roml
ROML_IMAGES_DIR := $(ROML_IMAGES_BASE_DIR)/$(CHIP)

# Bootloader build directory
BL_IMAGES_BASE_DIR := $(ROOT_DIR)/components/chips/images/usbrdl
BL_IMAGES_DIR := $(BL_IMAGES_BASE_DIR)/$(CHIP)

.NOTPARALLEL:

all: build_bootloader clean_romtable clean_roml build_romtable copy_romtable \
	build_roml copy_roml rom_sym_check verify_codefile

# build_bootloader = 'clean + build + copy' bootloader
.PHONY: build_bootloader
build_bootloader:
ifeq ($(findstring usb,$(ROMTBL_VARIANT)),usb)
	$(MAKE) -C $(BL_IMAGES_DIR)
endif

.PHONY: clean_romtable
clean_romtable:
	$(RM) -r $(BLDDIR)/romlsym/$(CHIP)/$(ROMTBL_VARIANT)

.PHONY: build_romtable
build_romtable:
	$(MAKE) -j 8 -C $(ROMLDIR) ROMTBL_VARIANT=$(ROMTBL_VARIANT) romtable_full

.PHONY: copy_romtable
copy_romtable:
	cp $(BLDDIR)/romlsym/$(CHIP)/$(ROMTBL_VARIANT)/romtable_full.S \
		$(ROMLDIR)/romtable.S

.PHONY: regen_rom_symdeps
regen_rom_symdeps:
	gmake -C $(ROMLDIR) $@
	cp $(ROMLDIR)/romsym.dep .

.PHONY: regen_rom_md5sign
regen_rom_md5sign:
	gmake -C $(ROMLDIR) $@
	cp $(ROMLDIR)/romtable.md5sign .

.PHONY: regen_rom_ioctl_md5sign
regen_rom_ioctl_md5sign:
	gmake -C $(ROMLDIR) $@
	cp $(ROMLDIR)/romtable_ioctl.md5sign .

.PHONY: clean_roml
clean_roml:
	$(MAKE) -C $(ROMLDIR) clean

.PHONY: build_roml
build_roml:
	$(MAKE) -j 8 -C $(ROMLDIR) ROMDASM=1 ROMDIFF=1

.PHONY: copy_roml
copy_roml: verify_codefile
	cp $(ROMLDIR)/roml.{map,ldmap,exe,dis,dis.src,bin,lds,opt,qt,logstrs} .
	cp $(ROMLDIR)/romtable.{S,xref,md5sign} .
	cp $(ROMLDIR)/romtable_ioctl.md5sign .
	cp $(ROML_SUPPORT_BASE_DIR)/autopatch_roml_template.cfg ./autopatch_roml.cfg
	mkdir -p $(ROML_SUPPORT_DIR)
	cp $(ROML_SUPPORT_BASE_DIR)/autopatch_roml_template.cfg $(ROML_SUPPORT_DIR)/autopatch_ram.cfg

	cp $(ROMLDIR)/romctl.txt .
	cp $(ROMLDIR)/romsym.dep .
	cp $(ROMLDIR)/roml.chk $(ROML_SUPPORT_DIR)/roml.chk
ifdef TCAM_ONLY
	cp $(ROMLDIR)/roml_patch_preamble.S .
else
	cp $(ROMLDIR)/romesc.txt .
	rm $(ROMLDIR)/hash_romesc.txt
endif
	cp $(ROMLDIR)/ramfnstub.w .
	[ ! -f $(ROMLDIR)/bcmjmptbl.c ] || cp $(ROMLDIR)/bcmjmptbl.c .
	[ ! -f $(ROMLDIR)/bcmjmptbl.h ] || cp $(ROMLDIR)/bcmjmptbl.h .
	cp $(ROMLDIR)/romdobjs.tgz .
	cp $(ROMLDIR)/*.codefile .
	cp $(ROMLDIR)/*.qt .
	cp $(ROMLDIR)/*.srec .
	cp $(ROMLDIR)/*.mem .
	[ ! -f $(ROMLDIR)/d11shm.c ] || cp $(ROMLDIR)/d11shm.c .

.PHONY:	rom_sym_check
rom_sym_check: rom_sym_check
	gmake -C $(ROMLDIR) $@

.PHONY: verify_codefile
verify_codefile:
	$(MAKE) -C $(ROMLDIR) verify_codefile

.PHONY: check_value
check_value:
	$(MAKE) -C $(ROMLDIR) check_value
	[ ! -f $(ROMLDIR)/roml.chk ] || cp $(ROMLDIR)/roml.chk $(ROML_SUPPORT_DIR)/roml.chk
 

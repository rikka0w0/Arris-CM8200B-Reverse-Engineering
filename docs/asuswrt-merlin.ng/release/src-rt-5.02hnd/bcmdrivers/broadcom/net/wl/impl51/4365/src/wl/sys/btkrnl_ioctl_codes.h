/* FILE-CSTYLED */

/*****************************************************************************/
/*                                                                           */
/*  Name:          btkrnl_ioctlcodes.h                                       */
/*                                                                           */
/*  Description:   Define IOCTL codes                                        */
/*                                                                           */
/*  Date        Modification                                                 */
/*  ------------------------                                                 */
/*                                                                           */
/*  Copyright (c) 2007, Broadcom COrp., All Rights Reserved.                 */
/*  Widcomm Bluetooth Software. Proprietary and confidential.                */
/*****************************************************************************/

#ifndef __btkrnl_ioctl_codes_h_
#define __btkrnl_ioctl_codes_h_

#ifdef _LINUX_
    #include "linux_ioctl_codes.h"
#else

// Define some error codes
//
#define BTDEVICE_SUCCESS                    0
#define BTDEVICE_ERROR_RESOURCES            1

#define DEVIOCTL_INVALID_IOCTL				2
#define DEVIOCTL_OUTPUT_BUFFER_TOO_SMALL	3
#define DEVIOCTL_INVALID_PARAMS             4
#define DEVIOCTL_NO_MEM                     5
#define DEVIOCTL_TARGET_INIT_FAILED         6
#define DEVIOCTL_TOO_MANY_DEVICES           7


// Device type used in IOCTLs
//
#define DD_TYPE_BTKRNL             0x8000
#define DD_TYPE_BTKRNL_BTW         0x002A                   // Value used by BTW


// Define IOCTL ranges
//
#define IOCTL_BTKRNL_BASE          0x100
#define IOCTL_BTKRNL_BTM_BASE      0x200
#define IOCTL_BTKRNL_L2C_BASE      0x300
#define IOCTL_BTKRNL_PAN_BASE      0x400
#define IOCTL_BTKRNL_RFC_BASE      0x500
#define IOCTL_BTKRNL_SDP_BASE      0x600
#define IOCTL_BTKRNL_AV_BASE       0x700


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// BTM related IOCTLS
//
enum
{
    eBTM_READ = IOCTL_BTKRNL_BTM_BASE,
    eBTM_START_STACK,
    eBTM_STOP_STACK,
    eBTM_RESET,
    eBTM_IS_DEVICE_UP,
    eBTM_REGISTER,
    eBTM_DEREGISTER,
    eBTM_SET_READ_MASK,
    eBTM_IS_REMNAME_ACTIVE,
    eBTM_START_INQUIRY,
    eBTM_CANCEL_INQUIRY,
    eBTM_SET_DISCOVERABLE,
    eBTM_READ_DISCOVERABLE,
    eBTM_SET_CONNECTABLE,
    eBTM_READ_CONNECTABLE,
    eBTM_SET_PER_INQ,
    eBTM_CANCEL_PER_INQ,
    eBTM_READ_REM_NAME,
    eBTM_IS_ACL_UP,
    eBTM_GET_NUM_ACLS,
    eBTM_SET_SNIFF_MODE,
    eBTM_CANCEL_SNIFF_MODE,
    eBTM_UNPAIR_DEVICE,
    eBTM_SEC_BOND,
    eBTM_SEC_AUTHORIZED,
    eBTM_SEC_PIN_REPLY,
    eBTM_DELETE_DEVICE,
    eBTM_ADD_DEVICE,
    eBTM_SEC_ADD_SERVICE,
    eBTM_SEC_SET_PAIRABLE,
    eBTM_SEC_SET_PIN_TYPE,
    eBTM_SEC_SET_MODE,
    eBTM_SEC_GET_INDEX,
    eBTM_SEC_RELEASE_INDEX,
    eBTM_SET_TRACE_LEVEL,
    eBTM_SET_DEV_CLASS,
    eBTM_SET_LOCAL_NAME,
    eBTM_IS_DEVICE_PRESENT,
    eBTM_CREATE_SCO,
    eBTM_REMOVE_SCO,
    eBTM_SWITCH_ROLE,
    eBTM_READ_LOCAL_BD_ADDR,
    eBTM_SEC_ACCESS_REQ,
    eBTM_READ_LOCAL_VERSION,
    eBTM_FORCE_ROLE,
    eBTM_GET_ACL_DISC_REASON,
    eBTM_GET_SCO_DISC_REASON,
    eBTM_READ_SCO_BD_ADDR,
    eBTM_READ_SCO_HANDLE,
    eBTM_SET_SCO_IND_CB,
    eBTM_ACCEPT_SCO,
    eBTM_REJECT_SCO,
    eBTM_SET_DEF_LINK_POLICY,
    eBTM_SET_DEF_SUPER_TOUT,
    eBTM_SET_LINK_SUPER,
    eBTM_READ_REMOTE_VERSION,
    eBTM_SET_SCAN_MODE,
    eBTM_SET_802_11_FREQS,
    eBTM_POWER_SET_DISC,
    eBTM_GET_ACL_MODE,
    eBTM_SET_LINK_POLICY,
    eBTM_POWER_BACK_ON,
    eBTM_IS_CTRLR_SUSPENDED,
    eBTM_SET_SUSPEND_FUNCS,
    eBTM_SET_ENH_FEAT,
    eBTM_CLR_ENH_FEAT,
    eBTM_SET_ACL_PROF_MASK,
    eBTM_SET_ESCO_MODE,
    eBTM_READ_ESCO_LPARAMS,
    eBTM_CHG_ESCO_LPARAMS,
    eBTM_ESCO_CONN_RSP,
    eBTM_ESCO_REG_EVENTS,
    eBTM_IS_REMOTE_PRESENT,
    eBTM_GET_LINK_ROLE,
    eBTM_GET_HCI_HANDLE,
    eBTM_GET_SEC_FLAG,
    eBTM_SET_ENCRYPTION,
    eBTM_CFG_AUTO_RMT_NAME,
    eBTM_SEND_VS_COMMAND,
    eBTM_PAN_COMMAND,
    eBTM_PAN_CONTINUE,
    eBTM_SEND_SET_ENCRYPTION_COMMAND,
    eBTM_SEND_IS_INQUIRY_ACTIVE_CMD,
    eBTM_SIMPLE_PAIR_REPLY,
    eBTM_DEVICE_ACTIVITY,
    eBTM_SET_SNIFF_SUB,
    eBTM_SEC_CANCEL_BOND,

    eLAST_BTM_IOCTL
};

#define IOCTL_BTM_READ               CTL_CODE(DD_TYPE_BTKRNL, eBTM_READ               , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_START_STACK        CTL_CODE(DD_TYPE_BTKRNL, eBTM_START_STACK        , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_STOP_STACK         CTL_CODE(DD_TYPE_BTKRNL, eBTM_STOP_STACK         , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_RESET				 CTL_CODE(DD_TYPE_BTKRNL, eBTM_RESET              , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_IS_DEVICE_UP		 CTL_CODE(DD_TYPE_BTKRNL, eBTM_IS_DEVICE_UP	      , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_BTM_REGISTER           CTL_CODE(DD_TYPE_BTKRNL, eBTM_REGISTER           , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_DEREGISTER         CTL_CODE(DD_TYPE_BTKRNL, eBTM_DEREGISTER         , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SET_READ_MASK      CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_READ_MASK      , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_BTM_IS_REMNAME_ACTIVE	 CTL_CODE(DD_TYPE_BTKRNL, eBTM_IS_REMNAME_ACTIVE  , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_START_INQUIRY		 CTL_CODE(DD_TYPE_BTKRNL, eBTM_START_INQUIRY      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_CANCEL_INQUIRY     CTL_CODE(DD_TYPE_BTKRNL, eBTM_CANCEL_INQUIRY     , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SET_DISCOVERABLE   CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_DISCOVERABLE   , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_READ_DISCOVERABLE  CTL_CODE(DD_TYPE_BTKRNL, eBTM_READ_DISCOVERABLE  , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SET_CONNECTABLE    CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_CONNECTABLE    , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_READ_CONNECTABLE   CTL_CODE(DD_TYPE_BTKRNL, eBTM_READ_CONNECTABLE   , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SET_PER_INQ        CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_PER_INQ        , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_CANCEL_PER_INQ     CTL_CODE(DD_TYPE_BTKRNL, eBTM_CANCEL_PER_INQ     , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_READ_REM_NAME      CTL_CODE(DD_TYPE_BTKRNL, eBTM_READ_REM_NAME      , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_BTM_IS_ACL_UP          CTL_CODE(DD_TYPE_BTKRNL, eBTM_IS_ACL_UP          , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_GET_NUM_ACLS       CTL_CODE(DD_TYPE_BTKRNL, eBTM_GET_NUM_ACLS       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SET_SNIFF_MODE     CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_SNIFF_MODE     , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_CANCEL_SNIFF_MODE  CTL_CODE(DD_TYPE_BTKRNL, eBTM_CANCEL_SNIFF_MODE  , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_BTM_UNPAIR_DEVICE      CTL_CODE(DD_TYPE_BTKRNL, eBTM_UNPAIR_DEVICE      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SEC_BOND           CTL_CODE(DD_TYPE_BTKRNL, eBTM_SEC_BOND           , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SEC_AUTHORIZED     CTL_CODE(DD_TYPE_BTKRNL, eBTM_SEC_AUTHORIZED     , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SEC_PIN_REPLY      CTL_CODE(DD_TYPE_BTKRNL, eBTM_SEC_PIN_REPLY      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_DELETE_DEVICE      CTL_CODE(DD_TYPE_BTKRNL, eBTM_DELETE_DEVICE      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_ADD_DEVICE         CTL_CODE(DD_TYPE_BTKRNL, eBTM_ADD_DEVICE         , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SEC_ADD_SERVICE    CTL_CODE(DD_TYPE_BTKRNL, eBTM_SEC_ADD_SERVICE    , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SEC_SET_PAIRABLE   CTL_CODE(DD_TYPE_BTKRNL, eBTM_SEC_SET_PAIRABLE   , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SEC_SET_PIN_TYPE   CTL_CODE(DD_TYPE_BTKRNL, eBTM_SEC_SET_PIN_TYPE   , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SEC_SET_MODE       CTL_CODE(DD_TYPE_BTKRNL, eBTM_SEC_SET_MODE       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SEC_GET_INDEX      CTL_CODE(DD_TYPE_BTKRNL, eBTM_SEC_GET_INDEX      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SEC_RELEASE_INDEX  CTL_CODE(DD_TYPE_BTKRNL, eBTM_SEC_RELEASE_INDEX  , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SET_TRACE_LEVEL    CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_TRACE_LEVEL    , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_BTM_SET_DEV_CLASS      CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_DEV_CLASS      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SET_LOCAL_NAME     CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_LOCAL_NAME     , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_IS_DEVICE_PRESENT  CTL_CODE(DD_TYPE_BTKRNL, eBTM_IS_DEVICE_PRESENT  , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_BTM_CREATE_SCO         CTL_CODE(DD_TYPE_BTKRNL, eBTM_CREATE_SCO         , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_REMOVE_SCO         CTL_CODE(DD_TYPE_BTKRNL, eBTM_REMOVE_SCO         , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_BTM_SWITCH_ROLE        CTL_CODE(DD_TYPE_BTKRNL, eBTM_SWITCH_ROLE        , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_READ_LOCAL_BD_ADDR CTL_CODE(DD_TYPE_BTKRNL, eBTM_READ_LOCAL_BD_ADDR , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_BTM_SEC_ACCESS_REQ       CTL_CODE(DD_TYPE_BTKRNL, eBTM_SEC_ACCESS_REQ       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_READ_LOCAL_VERSION   CTL_CODE(DD_TYPE_BTKRNL, eBTM_READ_LOCAL_VERSION   , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_FORCE_ROLE           CTL_CODE(DD_TYPE_BTKRNL, eBTM_FORCE_ROLE           , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_BTM_GET_ACL_DISC_REASON CTL_CODE(DD_TYPE_BTKRNL, eBTM_GET_ACL_DISC_REASON , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_GET_SCO_DISC_REASON CTL_CODE(DD_TYPE_BTKRNL, eBTM_GET_SCO_DISC_REASON , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_READ_SCO_BD_ADDR    CTL_CODE(DD_TYPE_BTKRNL, eBTM_READ_SCO_BD_ADDR    , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_READ_SCO_HANDLE     CTL_CODE(DD_TYPE_BTKRNL, eBTM_READ_SCO_HANDLE     , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SET_SCO_IND_CB      CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_SCO_IND_CB      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_ACCEPT_SCO          CTL_CODE(DD_TYPE_BTKRNL, eBTM_ACCEPT_SCO          , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_REJECT_SCO          CTL_CODE(DD_TYPE_BTKRNL, eBTM_REJECT_SCO          , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SET_DEF_LINK_POLICY CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_DEF_LINK_POLICY , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SET_DEF_SUPER_TOUT  CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_DEF_SUPER_TOUT  , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SET_LINK_SUPER      CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_LINK_SUPER      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_READ_REMOTE_VERSION CTL_CODE(DD_TYPE_BTKRNL, eBTM_READ_REMOTE_VERSION , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SET_SCAN_MODE       CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_SCAN_MODE       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SET_802_11_FREQS    CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_802_11_FREQS    , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_POWER_SET_DISC      CTL_CODE(DD_TYPE_BTKRNL, eBTM_POWER_SET_DISC      , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_BTM_GET_ACL_MODE       CTL_CODE(DD_TYPE_BTKRNL, eBTM_GET_ACL_MODE       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SET_LINK_POLICY    CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_LINK_POLICY    , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_BTM_POWER_BACK_ON      CTL_CODE(DD_TYPE_BTKRNL, eBTM_POWER_BACK_ON      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_IS_CTRLR_SUSPENDED CTL_CODE(DD_TYPE_BTKRNL, eBTM_IS_CTRLR_SUSPENDED , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SET_SUSPEND_FUNCS  CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_SUSPEND_FUNCS  , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_BTM_SET_ENH_FEAT       CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_ENH_FEAT       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_CLR_ENH_FEAT       CTL_CODE(DD_TYPE_BTKRNL, eBTM_CLR_ENH_FEAT       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SET_ACL_PROF_MASK  CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_ACL_PROF_MASK  , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_BTM_SET_ESCO_MODE      CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_ESCO_MODE      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_READ_ESCO_LPARAMS  CTL_CODE(DD_TYPE_BTKRNL, eBTM_READ_ESCO_LPARAMS  , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_CHG_ESCO_LPARAMS   CTL_CODE(DD_TYPE_BTKRNL, eBTM_CHG_ESCO_LPARAMS   , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_ESCO_CONN_RSP      CTL_CODE(DD_TYPE_BTKRNL, eBTM_ESCO_CONN_RSP      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_ESCO_REG_EVENTS    CTL_CODE(DD_TYPE_BTKRNL, eBTM_ESCO_REG_EVENTS    , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_BTM_IS_REMOTE_PRESENT  CTL_CODE(DD_TYPE_BTKRNL, eBTM_IS_REMOTE_PRESENT  , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_GET_LINK_ROLE      CTL_CODE(DD_TYPE_BTKRNL, eBTM_GET_LINK_ROLE      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_GET_HCI_HANDLE     CTL_CODE(DD_TYPE_BTKRNL, eBTM_GET_HCI_HANDLE     , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_GET_SEC_FLAG       CTL_CODE(DD_TYPE_BTKRNL, eBTM_GET_SEC_FLAG       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SET_ENCRYPTION     CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_ENCRYPTION     , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_CFG_AUTO_RMT_NAME  CTL_CODE(DD_TYPE_BTKRNL, eBTM_CFG_AUTO_RMT_NAME  , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SEND_VS_COMMAND    CTL_CODE(DD_TYPE_BTKRNL, eBTM_SEND_VS_COMMAND    , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_PAN_COMMAND        CTL_CODE(DD_TYPE_BTKRNL, eBTM_PAN_COMMAND        , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_PAN_CONTINUE       CTL_CODE(DD_TYPE_BTKRNL, eBTM_PAN_CONTINUE       , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_BTM_SEND_SET_ENCRYPTION_COMMAND  CTL_CODE(DD_TYPE_BTKRNL, eBTM_SEND_SET_ENCRYPTION_COMMAND  , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SEND_IS_INQUIRY_ACTIVE_CMD   CTL_CODE(DD_TYPE_BTKRNL, eBTM_SEND_IS_INQUIRY_ACTIVE_CMD   , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_BTM_SIMPLE_PAIR_REPLY  CTL_CODE(DD_TYPE_BTKRNL, eBTM_SIMPLE_PAIR_REPLY , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_DEVICE_ACTIVITY    CTL_CODE(DD_TYPE_BTKRNL, eBTM_DEVICE_ACTIVITY   , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_SET_SNIFF_SUB      CTL_CODE(DD_TYPE_BTKRNL, eBTM_SET_SNIFF_SUB     , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BTM_CANCEL_BOND        CTL_CODE(DD_TYPE_BTKRNL, eBTM_SEC_CANCEL_BOND   , METHOD_BUFFERED, FILE_ANY_ACCESS)

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// RFCOMM related IOCTLS
//
enum
{
    ePORT_OPEN = IOCTL_BTKRNL_RFC_BASE,
    ePORT_CLOSE,
    ePORT_EVENT_MASK,
    ePORT_CHECK_CONNECTION,
    ePORT_SETSTATE,
    ePORT_GETSTATE,
    ePORT_CONTROL,
    ePORT_GET_MODEMSTATUS,
    ePORT_CLEAR_ERROR,
    ePORT_SEND_ERROR,

    ePORT_GET_QUEUESTATUS,
    ePORT_PURGE,
    ePORT_READ,
    ePORT_WRITE,
    ePORT_FLOW_CONTROL,
    eRFCOMM_ALLOC_SCN,
    eRFCOMM_FREE_SCN,
    eRFCOMM_FIND_SCN,
    eVPORT_SET_EVENTCALLBACK,
    eVPORT_EVENT_MASK,

    eVPORT_CLOSE,
    eVPORT_SETSTATE,
    eVPORT_GETSTATE,
    eVPORT_CONTROL,
    eVPORT_GET_MODEMSTATUS,
    eVPORT_CLEAR_ERROR,
    eVPORT_SEND_ERROR,
    eVPORT_GET_QUEUESTATUS,
    eVPORT_PURGE,
    eVPORT_READ,

    eVPORT_WRITE,
    eVPORT_OPEN,
    eVPORT_FLOW_CONTROL,
    eVPORT_BLOCKED_READ,
    eVPORT_BLOCKED_WAIT_EVT,
    eVPORT_CLEAR_BLOCKS,
    eVPORT_WAIT_ON_TX,
    eVPORT_READ_BD_ADDR,
    eBTKRNL_PORT_GET_STATS,
    eBTKRNL_PORT_SET_TRACE_LEVEL,
    eBTKRNL_DEV_CONN_STATS,
    eBTKRNL_PORT_ASSIGN_COM,
    eBTKRNL_PORT_RESULT,

    eLAST_RFCOMM_IOCTL
};

#define IOCTL_PORT_OPEN                 CTL_CODE(DD_TYPE_BTKRNL, ePORT_OPEN             , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_PORT_CLOSE                CTL_CODE(DD_TYPE_BTKRNL, ePORT_CLOSE            , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_PORT_EVENT_MASK           CTL_CODE(DD_TYPE_BTKRNL, ePORT_EVENT_MASK       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_PORT_CHECK_CONNECTION     CTL_CODE(DD_TYPE_BTKRNL, ePORT_CHECK_CONNECTION , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_PORT_SETSTATE             CTL_CODE(DD_TYPE_BTKRNL, ePORT_SETSTATE         , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_PORT_GETSTATE             CTL_CODE(DD_TYPE_BTKRNL, ePORT_GETSTATE         , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_PORT_CONTROL              CTL_CODE(DD_TYPE_BTKRNL, ePORT_CONTROL          , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_PORT_GET_MODEMSTATUS      CTL_CODE(DD_TYPE_BTKRNL, ePORT_GET_MODEMSTATUS  , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_PORT_CLEAR_ERROR          CTL_CODE(DD_TYPE_BTKRNL, ePORT_CLEAR_ERROR      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_PORT_SEND_ERROR           CTL_CODE(DD_TYPE_BTKRNL, ePORT_SEND_ERROR       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_PORT_GET_QUEUESTATUS      CTL_CODE(DD_TYPE_BTKRNL, ePORT_GET_QUEUESTATUS  , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_PORT_PURGE                CTL_CODE(DD_TYPE_BTKRNL, ePORT_PURGE            , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_PORT_READ                 CTL_CODE(DD_TYPE_BTKRNL, ePORT_READ             , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_PORT_WRITE                CTL_CODE(DD_TYPE_BTKRNL, ePORT_WRITE            , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_PORT_FLOW_CONTROL         CTL_CODE(DD_TYPE_BTKRNL, ePORT_FLOW_CONTROL     , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_RFCOMM_ALLOC_SCN          CTL_CODE(DD_TYPE_BTKRNL, eRFCOMM_ALLOC_SCN      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_RFCOMM_FREE_SCN           CTL_CODE(DD_TYPE_BTKRNL, eRFCOMM_FREE_SCN       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_RFCOMM_FIND_SCN           CTL_CODE(DD_TYPE_BTKRNL, eRFCOMM_FIND_SCN       , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_VPORT_SET_EVENTCALLBACK   CTL_CODE(DD_TYPE_BTKRNL, eVPORT_SET_EVENTCALLBACK, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_EVENT_MASK          CTL_CODE(DD_TYPE_BTKRNL, eVPORT_EVENT_MASK      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_CLOSE               CTL_CODE(DD_TYPE_BTKRNL, eVPORT_CLOSE           , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_SETSTATE            CTL_CODE(DD_TYPE_BTKRNL, eVPORT_SETSTATE        , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_GETSTATE            CTL_CODE(DD_TYPE_BTKRNL, eVPORT_GETSTATE        , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_CONTROL             CTL_CODE(DD_TYPE_BTKRNL, eVPORT_CONTROL         , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_GET_MODEMSTATUS     CTL_CODE(DD_TYPE_BTKRNL, eVPORT_GET_MODEMSTATUS , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_CLEAR_ERROR         CTL_CODE(DD_TYPE_BTKRNL, eVPORT_CLEAR_ERROR     , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_SEND_ERROR          CTL_CODE(DD_TYPE_BTKRNL, eVPORT_SEND_ERROR      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_GET_QUEUESTATUS     CTL_CODE(DD_TYPE_BTKRNL, eVPORT_GET_QUEUESTATUS , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_PURGE               CTL_CODE(DD_TYPE_BTKRNL, eVPORT_PURGE           , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_READ                CTL_CODE(DD_TYPE_BTKRNL, eVPORT_READ            , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_WRITE               CTL_CODE(DD_TYPE_BTKRNL, eVPORT_WRITE           , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_OPEN			    CTL_CODE(DD_TYPE_BTKRNL, eVPORT_OPEN			, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_FLOW_CONTROL        CTL_CODE(DD_TYPE_BTKRNL, eVPORT_FLOW_CONTROL    , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_BLOCKED_READ        CTL_CODE(DD_TYPE_BTKRNL, eVPORT_BLOCKED_READ    , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_BLOCKED_WAIT_EVT    CTL_CODE(DD_TYPE_BTKRNL, eVPORT_BLOCKED_WAIT_EVT, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_CLEAR_BLOCKS        CTL_CODE(DD_TYPE_BTKRNL, eVPORT_CLEAR_BLOCKS    , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_WAIT_ON_TX          CTL_CODE(DD_TYPE_BTKRNL, eVPORT_WAIT_ON_TX      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_READ_BD_ADDR        CTL_CODE(DD_TYPE_BTKRNL, eVPORT_READ_BD_ADDR    , METHOD_BUFFERED, FILE_ANY_ACCESS)

#define BTKRNL_IOCTL_PORT_GET_STATS         CTL_CODE(DD_TYPE_BTKRNL, eBTKRNL_PORT_GET_STATS,        METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_PORT_SET_TRACE_LEVEL   CTL_CODE(DD_TYPE_BTKRNL, eBTKRNL_PORT_SET_TRACE_LEVEL,  METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_DEV_CONN_STATS         CTL_CODE(DD_TYPE_BTKRNL, eBTKRNL_DEV_CONN_STATS,        METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_PORT_ASSIGN_COM        CTL_CODE(DD_TYPE_BTKRNL, eBTKRNL_PORT_ASSIGN_COM,       METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_PORT_RESULT            CTL_CODE(DD_TYPE_BTKRNL, eBTKRNL_PORT_RESULT,           METHOD_BUFFERED, FILE_ANY_ACCESS)



////////////////////////////////////////////////////////////////////////////////////////////////////
//
// L2CAP related IOCTLS
//
enum
{
    eL2CAP_READ = IOCTL_BTKRNL_L2C_BASE,
    eL2CAP_REG,
    eL2CAP_DEREG,
    eL2CAP_CON_REQ,
    eL2CAP_ERTM_CON_REQ,
    eL2CAP_CON_RSP,
    eL2CAP_ERTM_CON_RSP,
    eL2CAP_CFG_REQ,
    eL2CAP_CFG_RSP,
    eL2CAP_DISC_REQ,
    eL2CAP_DISC_RSP,
    eL2CAP_DATA,
    eL2CAP_SET_FLUSHABLE,
    eL2CAP_FLUSH_CHNL,
    eL2CAP_SET_ROLE,
    eL2CAP_PING_REQ,
    eL2CAP_SET_IDLE_TOUT,
    eL2CAP_SET_TRACE_LEVEL,
    eL2CAP_ALLOC_PSM,
    eL2CAP_FREE_PSM,
    eL2CAP_SET_FLUSH_TOUT,
    eL2CAP_GET_STATS,

    eBTKRNL_L2CAP_REGISTER,
    eBTKRNL_L2CAP_DEREGISTER,
    eBTKRNL_L2CAP_CONNECT_REQ,
    eBTKRNL_L2CAP_CONNECT_RSP,
    eBTKRNL_L2CAP_CONFIG_REQ,
    eBTKRNL_L2CAP_CONFIG_RSP,
    eBTKRNL_L2CAP_DISC_REQ,
    eBTKRNL_L2CAP_DISC_RSP,
    eBTKRNL_L2CAP_DATA_WRITE,

    eLAST_L2CAP_IOCTL
};

#define IOCTL_L2CAP_READ             CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_READ             , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_REG              CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_REG              , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_DEREG            CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_DEREG            , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_CON_REQ          CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_CON_REQ          , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_ERTM_CON_REQ     CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_ERTM_CON_REQ     , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_CON_RSP          CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_CON_RSP          , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_ERTM_CON_RSP     CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_ERTM_CON_RSP     , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_CFG_REQ          CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_CFG_REQ          , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_CFG_RSP          CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_CFG_RSP          , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_DISC_REQ         CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_DISC_REQ         , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_DISC_RSP         CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_DISC_RSP         , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_DATA             CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_DATA             , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_SET_FLUSHABLE    CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_SET_FLUSHABLE    , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_FLUSH_CHNL       CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_FLUSH_CHNL       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_SET_ROLE	     CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_SET_ROLE         , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_PING_REQ         CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_PING_REQ         , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_SET_IDLE_TOUT    CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_SET_IDLE_TOUT    , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_SET_TRACE_LEVEL  CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_SET_TRACE_LEVEL  , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_ALLOC_PSM        CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_ALLOC_PSM        , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_FREE_PSM         CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_FREE_PSM         , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_SET_FLUSH_TOUT   CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_SET_FLUSH_TOUT   , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_L2CAP_GET_STATS        CTL_CODE(DD_TYPE_BTKRNL, eL2CAP_GET_STATS        , METHOD_BUFFERED, FILE_ANY_ACCESS)


// These IOCTLs come from other drivers
#define BTKRNL_IOCTL_L2CAP_REGISTER         CTL_CODE(DD_TYPE_BTKRNL, eBTKRNL_L2CAP_REGISTER    , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_L2CAP_DEREGISTER       CTL_CODE(DD_TYPE_BTKRNL, eBTKRNL_L2CAP_DEREGISTER  , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_L2CAP_CONNECT_REQ      CTL_CODE(DD_TYPE_BTKRNL, eBTKRNL_L2CAP_CONNECT_REQ , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_L2CAP_CONNECT_RSP      CTL_CODE(DD_TYPE_BTKRNL, eBTKRNL_L2CAP_CONNECT_RSP , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_L2CAP_CONFIG_REQ       CTL_CODE(DD_TYPE_BTKRNL, eBTKRNL_L2CAP_CONFIG_REQ  , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_L2CAP_CONFIG_RSP       CTL_CODE(DD_TYPE_BTKRNL, eBTKRNL_L2CAP_CONFIG_RSP  , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_L2CAP_DISCONNECT_REQ   CTL_CODE(DD_TYPE_BTKRNL, eBTKRNL_L2CAP_DISC_REQ    , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_L2CAP_DISCONNECT_RSP   CTL_CODE(DD_TYPE_BTKRNL, eBTKRNL_L2CAP_DISC_RSP    , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_L2CAP_DATA_WRITE       CTL_CODE(DD_TYPE_BTKRNL, eBTKRNL_L2CAP_DATA_WRITE  , METHOD_BUFFERED, FILE_ANY_ACCESS)


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// SDP related IOCTLS
//
enum
{
    eSDP_SERVICE_SEARCH = IOCTL_BTKRNL_SDP_BASE,
    eSDP_CREATE_RECORD,
    eSDP_DELETE_RECORD,
    eSDP_ADD_ATTR,
    eSDP_ADD_SEQ,
    eSDP_ADD_UUID_SEQ,
    eSDP_ADD_PROT_DESCR,
    eSDP_ADD_PROF_DESCR,
    eSDP_ADD_LANG_BASE,
    eSDP_ADD_SERV_CLASS,
    eSDP_DELETE_ATTR,
    eSDP_SET_TRACE_LEVEL,
    eSDP_READ_REC,
    eSDP_READ_ATTR,
    eSDP_RELEASE_DB,
    eSDP_WAIT,
    eSDP_FIND_RECORD,
    eSDP_READ_RAW_DATA,
    eSDP_ADDITIONAL_PROT_DESCR,
    eSDP_READ_RAW_ATTRIBUTE,

    eLAST_SDP_IOCTL
};

#define IOCTL_SDP_SERVICE_SEARCH      CTL_CODE(DD_TYPE_BTKRNL, eSDP_SERVICE_SEARCH      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_CREATE_RECORD       CTL_CODE(DD_TYPE_BTKRNL, eSDP_CREATE_RECORD       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_DELETE_RECORD       CTL_CODE(DD_TYPE_BTKRNL, eSDP_DELETE_RECORD       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_ADD_ATTR            CTL_CODE(DD_TYPE_BTKRNL, eSDP_ADD_ATTR            , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_ADD_SEQ             CTL_CODE(DD_TYPE_BTKRNL, eSDP_ADD_SEQ             , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_ADD_UUID_SEQ        CTL_CODE(DD_TYPE_BTKRNL, eSDP_ADD_UUID_SEQ        , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_ADD_PROT_DESCR      CTL_CODE(DD_TYPE_BTKRNL, eSDP_ADD_PROT_DESCR      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_ADD_PROF_DESCR      CTL_CODE(DD_TYPE_BTKRNL, eSDP_ADD_PROF_DESCR      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_ADD_LANG_BASE       CTL_CODE(DD_TYPE_BTKRNL, eSDP_ADD_LANG_BASE       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_ADD_SERV_CLASS      CTL_CODE(DD_TYPE_BTKRNL, eSDP_ADD_SERV_CLASS      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_DELETE_ATTR         CTL_CODE(DD_TYPE_BTKRNL, eSDP_DELETE_ATTR         , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_SET_TRACE_LEVEL     CTL_CODE(DD_TYPE_BTKRNL, eSDP_SET_TRACE_LEVEL     , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_READ_REC            CTL_CODE(DD_TYPE_BTKRNL, eSDP_READ_REC            , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_READ_ATTR           CTL_CODE(DD_TYPE_BTKRNL, eSDP_READ_ATTR           , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_RELEASE_DB          CTL_CODE(DD_TYPE_BTKRNL, eSDP_RELEASE_DB          , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_WAIT                CTL_CODE(DD_TYPE_BTKRNL, eSDP_WAIT                , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_FIND_RECORD         CTL_CODE(DD_TYPE_BTKRNL, eSDP_FIND_RECORD         , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_READ_RAW_DATA       CTL_CODE(DD_TYPE_BTKRNL, eSDP_READ_RAW_DATA       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_ADDITIONAL_PROT_DESCR CTL_CODE(DD_TYPE_BTKRNL, eSDP_ADDITIONAL_PROT_DESCR, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SDP_READ_RAW_ATTRIBUTE  CTL_CODE(DD_TYPE_BTKRNL, eSDP_READ_RAW_ATTRIBUTE  , METHOD_BUFFERED, FILE_ANY_ACCESS)


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// PAN and LAP
//
#define BTKRNL_IOCTL_REGISTER_PAN   CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_PAN_BASE+0x00, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_DEREGISTER_PAN CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_PAN_BASE+0x01, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_PAN_STATUS     CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_PAN_BASE+0x03, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_BNEP_TRACE     CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_PAN_BASE+0x04, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_PPP_TRACE      CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_PAN_BASE+0x05, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_LAP_CONFIG_CHANGED    CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_PAN_BASE+0x07, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_LAP_START             CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_PAN_BASE+0x08, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_LAP_STOP              CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_PAN_BASE+0x09, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_PPP_CONTROL             CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_BASE+0xBD, METHOD_BUFFERED, FILE_ANY_ACCESS)



////////////////////////////////////////////////////////////////////////////////////////////////////
//
// General IOCTLs to BTKRNL
//
#define BTKRNL_IOCTL_HCI_WRITE          CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_BASE+0x00, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_HCI_READ           CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_BASE+0x01, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define BTKRNL_IOCTL_HCI_CMD_WITH_WAIT  CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_BASE+0x02, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_HCI_POWER_STATE    CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_BASE+0x03, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_HCI_READ_RSSI      CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_BASE+0x04, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_BT_SCO_MESSAGE            CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_BASE+0x05, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_LOCAL_LOOP         CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_BASE+0x06, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_TRACE_READ                CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_BASE+0x07, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_TRACE_DISABLE             CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_BASE+0x08, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_TRACE_PROTOCOL_FLAGS      CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_BASE+0x09, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_DEVICE_LOG         CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_BASE+0x0A, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_DEVICE_LOG_RB      CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_BASE+0x0B, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_DEVICE_DUMP_RB     CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_BASE+0x0C, METHOD_BUFFERED, FILE_ANY_ACCESS)

// Define IOCTL that can be sent from sleeper app
//
#define BTKRNL_IOCTL_SLEEPER_REG     CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_BASE+0x12, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define BTKRNL_IOCTL_SLEEPER_DEREG   CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_BASE+0x13, METHOD_BUFFERED, FILE_ANY_ACCESS)


// These requests are sent from the LAN Access Server
#define IOCTL_VPORT_REGISTER         CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_BASE+0x14, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VPORT_DEREGISTER       CTL_CODE(DD_TYPE_BTKRNL, IOCTL_BTKRNL_BASE+0x15, METHOD_BUFFERED, FILE_ANY_ACCESS)

//
// For older systems where we do not have the source tgo RadioInit
//
#define LEGACY_IOCTL_HCI_CMD_WITH_WAIT CTL_CODE(60500, 0x142, METHOD_BUFFERED, FILE_ANY_ACCESS)

////////////////////////////////////////////////////////////////////////////////////////////////////
//
//      Make these the same as BTW, to avoid problems with sharing code for AMP and USB
//      -------------------------------------------------------------------------------
//
// IOCTLs passed from the lower layer drivers to BTKRNL
// This request registers a newly started Bluetooth device instance
// with the protocol stack.  Input buffer holds a BTDEVICE_PARS
// structure, there is no output buffer.  Returns DEVIOCTL_NOERROR
// if succeeds.
#define BTKRNL_IOCTL_DEVICE_START       CTL_CODE(DD_TYPE_BTKRNL_BTW, IOCTL_BTKRNL_BASE+0x30, METHOD_BUFFERED, FILE_ANY_ACCESS)

// This request de-registers a previously started Bluetooth device
// instance from the protocol stack.  Input buffer holds a device handle,
// there is no output buffer.  Returns DEVIOCTL_NOERROR if succeeds.
// Called when the device is stopped or removed from the system.
#define BTKRNL_IOCTL_DEVICE_STOP         CTL_CODE(DD_TYPE_BTKRNL_BTW, IOCTL_BTKRNL_BASE+0x34, METHOD_BUFFERED, FILE_ANY_ACCESS)

// This request passes Bluetooth data newly received from the dongle
// to the protocol stack.  Input buffer holds device handle followed
// by data itself, there is no output buffer.  Input buffer size is
// an aggregate size of both handle and data.  Returns DEVIOCTL_NOERROR
// if succeeds.  May be called at high execution priority levels.
#define BTKRNL_IOCTL_DEVICE_DATA         CTL_CODE(DD_TYPE_BTKRNL_BTW, IOCTL_BTKRNL_BASE+0x31, METHOD_BUFFERED, FILE_ANY_ACCESS)

// This request passes Bluetooth event data newly received from the dongle
// to the protocol stack.  Input buffer holds device handle followed
// by event data itself, there is no output buffer.  Input buffer size is
// an aggregate size of both handle and event data.  Returns DEVIOCTL_NOERROR
// if succeeds.  May be called at high execution priority levels.
#define BTKRNL_IOCTL_DEVICE_EVENT        CTL_CODE(DD_TYPE_BTKRNL_BTW, IOCTL_BTKRNL_BASE+0x32, METHOD_BUFFERED, FILE_ANY_ACCESS)


// This request passes Bluetooth voice packet newly received from the dongle
// to the protocol stack.  Input buffer holds device handle followed
// by data itself, there is no output buffer.  Input buffer size is
// an aggregate size of both handle and data.  Returns DEVIOCTL_NOERROR
// if succeeds.  May be called at high execution priority levels.
#define BTKRNL_IOCTL_DEVICE_VOICE        CTL_CODE(DD_TYPE_BTKRNL_BTW, IOCTL_BTKRNL_BASE+0x35, METHOD_BUFFERED, FILE_ANY_ACCESS)


// This is an indication from the device that it has completed its suspend
// requested by the BTDEVICE_CONTROL_DEVICE_SUSPEND control command
// (WinXP or later USB device only at the moment)
// DWORD input buffer holds the device handle followed by the completion status code (0 if no errors)
#define BTKRNL_IOCTL_DEVICE_SUSPEND_COMPLETED  CTL_CODE(DD_TYPE_BTKRNL_BTW, IOCTL_BTKRNL_BASE+0x36, METHOD_BUFFERED, FILE_ANY_ACCESS)


// This is an indication from the device that it has completed its resume
// requested by the BTDEVICE_CONTROL_DEVICE_RESUME control command
// (WinXP or later USB device only at the moment)
// DWORD input buffer holds the device handle followed by the completion status code (0 if no errors)
#define BTKRNL_IOCTL_DEVICE_RESUME_COMPLETED   CTL_CODE(DD_TYPE_BTKRNL_BTW, IOCTL_BTKRNL_BASE+0x37, METHOD_BUFFERED, FILE_ANY_ACCESS)

// This request passes Bluetooth data newly received from the AMP dongle
// to the protocol stack.  Input buffer holds BTKRNL context followed
// by data itself, there is no output buffer.  Input buffer size is
// an aggregate size of both context and data.  Returns DEVIOCTL_NOERROR
// if succeeds.  May be called at high execution priority levels.
#define BTKRNL_IOCTL_DEVICE_WM_AMP_DATA   CTL_CODE(DD_TYPE_BTKRNL_BTW,   IOCTL_BTKRNL_BASE+0x39, METHOD_BUFFERED, FILE_ANY_ACCESS)

// This request passes Bluetooth event data newly received from the AMP dongle
// to the protocol stack.  Input buffer holds BTKRNL context followed
// by event data itself, there is no output buffer.  Input buffer size is
// an aggregate size of both context and event data.  Returns DEVIOCTL_NOERROR
// if succeeds.  May be called at high execution priority levels.
#define BTKRNL_IOCTL_DEVICE_WM_AMP_EVENT  CTL_CODE(DD_TYPE_BTKRNL_BTW,     IOCTL_BTKRNL_BASE+0x3A, METHOD_BUFFERED, FILE_ANY_ACCESS)

// This request de-registers a previously started AMP device
// instance from the protocol stack.  Input buffer holds a BTKRNL context,
// there is no output buffer.  Returns DEVIOCTL_NOERROR if succeeds.
// Called when the device is stopped or removed from the system.
#define BTKRNL_IOCTL_DEVICE_WM_AMP_STOP   CTL_CODE(DD_TYPE_BTKRNL_BTW,    IOCTL_BTKRNL_BASE+0x3b, METHOD_BUFFERED, FILE_ANY_ACCESS)



#define IOCTL_IS_AMP_ENABLED       CTL_CODE(DD_TYPE_BTKRNL,  IOCTL_BTKRNL_BASE+0x19, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_IS_AMP_PRESENT       CTL_CODE(DD_TYPE_BTKRNL,  IOCTL_BTKRNL_BASE+0x20, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AMP_ENABLE           CTL_CODE(DD_TYPE_BTKRNL,  IOCTL_BTKRNL_BASE+0x21, METHOD_BUFFERED, FILE_ANY_ACCESS)


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// AV related IOCTLS
//
enum
{
    eAVDT_REGISTER = IOCTL_BTKRNL_AV_BASE,
    eAVDT_DEREGISTER,
    eAVDT_READ,
    eAVDT_CREATE_STREAM,
    eAVDT_REMOVE_STREAM,
    eAVDT_DISCOVER,
    eAVDT_GETCAP,
    eAVDT_OPEN,
    eAVDT_CFG_RSP,
    eAVDT_START,
    eAVDT_SUSPEND,
    eAVDT_CLOSE,
    eAVDT_RECONFIG,
    eAVDT_RECFG_RSP,
    eAVDT_WRITE,
    eAVDT_CONNECT,
    eAVDT_DISCONNECT,
    eAVDT_GET_CID,
    eAVDT_IS_CONNECTED,
    eAVDT_FIND_FREE_STR,
    eAVDT_GET_STR_TYPES,

    eLAST_AV_IOCTL
};

#define IOCTL_AVDT_REGISTER         CTL_CODE(DD_TYPE_BTKRNL, eAVDT_REGISTER       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_DEREGISTER       CTL_CODE(DD_TYPE_BTKRNL, eAVDT_DEREGISTER     , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_READ             CTL_CODE(DD_TYPE_BTKRNL, eAVDT_READ           , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_CREATE_STREAM    CTL_CODE(DD_TYPE_BTKRNL, eAVDT_CREATE_STREAM  , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_REMOVE_STREAM    CTL_CODE(DD_TYPE_BTKRNL, eAVDT_REMOVE_STREAM  , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_DISCOVER         CTL_CODE(DD_TYPE_BTKRNL, eAVDT_DISCOVER       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_GETCAP           CTL_CODE(DD_TYPE_BTKRNL, eAVDT_GETCAP         , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_OPEN             CTL_CODE(DD_TYPE_BTKRNL, eAVDT_OPEN           , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_CFG_RSP          CTL_CODE(DD_TYPE_BTKRNL, eAVDT_CFG_RSP        , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_START            CTL_CODE(DD_TYPE_BTKRNL, eAVDT_START          , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_SUSPEND          CTL_CODE(DD_TYPE_BTKRNL, eAVDT_SUSPEND        , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_CLOSE            CTL_CODE(DD_TYPE_BTKRNL, eAVDT_CLOSE          , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_RECONFIG         CTL_CODE(DD_TYPE_BTKRNL, eAVDT_RECONFIG       , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_RECFG_RSP        CTL_CODE(DD_TYPE_BTKRNL, eAVDT_RECFG_RSP      , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_WRITE            CTL_CODE(DD_TYPE_BTKRNL, eAVDT_WRITE          , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_CONNECT          CTL_CODE(DD_TYPE_BTKRNL, eAVDT_CONNECT        , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_DISCONNECT       CTL_CODE(DD_TYPE_BTKRNL, eAVDT_DISCONNECT     , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_GET_CID          CTL_CODE(DD_TYPE_BTKRNL, eAVDT_GET_CID        , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_IS_CONNECTED     CTL_CODE(DD_TYPE_BTKRNL, eAVDT_IS_CONNECTED   , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_FIND_FREE_STR    CTL_CODE(DD_TYPE_BTKRNL, eAVDT_FIND_FREE_STR  , METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_AVDT_GET_STR_TYPES    CTL_CODE(DD_TYPE_BTKRNL, eAVDT_GET_STR_TYPES  , METHOD_BUFFERED, FILE_ANY_ACCESS)





#endif // not Linux
#endif // __btkrnl_ioctl__h_

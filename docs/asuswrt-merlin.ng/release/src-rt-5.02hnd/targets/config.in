#
# For a description of the syntax of this configuration file,
# see Documentation/kbuild/config-language.txt.
#

#****************************************************************************
#
#  Copyright (c) 2000-2009 Broadcom Corporation
#
#  This program is the proprietary software of Broadcom Corporation and/or
#  its licensors, and may only be used, duplicated, modified or distributed
#  pursuant to the terms and conditions of a separate, written license
#  agreement executed between you and Broadcom (an "Authorized License").
#  Except as set forth in an Authorized License, Broadcom grants no license
#  (express or implied), right to use, or waiver of any kind with respect to
#  the Software, and Broadcom expressly reserves all rights in and to the
#  Software and all intellectual property rights therein.  IF YOU HAVE NO
#  AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY,
#  AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE
#  SOFTWARE.
#  SOFTWARE.
#
#  Except as expressly set forth in the Authorized License,
#
#  1.     This program, including its structure, sequence and organization,
#  constitutes the valuable trade secrets of Broadcom, and you shall use all
#  reasonable efforts to protect the confidentiality thereof, and to use this
#  information only in connection with your use of Broadcom integrated circuit
#  products.
#
#  2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED
#  "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS
#  OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH
#  RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL
#  IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR
#  A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET
#  ENJOYMENT, QUIET POSSESSION OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME
#  THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
#
#  3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM
#  OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL,
#  INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY
#  RELATING TO YOUR USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM
#  HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN
#  EXCESS OF THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1,
#  WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY
#  FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.
#
#****************************************************************************

mainmenu_name "Broadcom CommEngine Software Configuration"


mainmenu_option next_comment
comment 'Chip and Board configuration selection'

mainmenu_option next_comment
comment 'Chip selection'

choice 'Broadcom Commengine chip' \
      "63268       BRCM_63268     \
       6838        BRCM_6838      \
       6848        BRCM_6848      \
       6858        BRCM_6858      \
       60333       BRCM_60333     \
       63138       BRCM_63138     \
       63148       BRCM_63148     \
       63381       BRCM_63381     \
       47189       BRCM_47189     \
       4908        BRCM_4908"  63138

if [ "$BRCM_63268" = "y" ]; then
    define_string BRCM_CHIP "63268"
fi
if [ "$BRCM_6838" = "y" ]; then
    define_string BRCM_CHIP "6838"
fi
if [ "$BRCM_6848" = "y" ]; then
    define_string BRCM_CHIP "6848"
fi
if [ "$BRCM_6858" = "y" ]; then
    define_string BRCM_CHIP "6858"
fi
if [ "$BRCM_60333" = "y" ]; then
    define_string BRCM_CHIP "60333"
fi
if [ "$BRCM_63138" = "y" ]; then
    define_string BRCM_CHIP "63138"
fi
if [ "$BRCM_63148" = "y" ]; then
    define_string BRCM_CHIP "63148"
fi
if [ "$BRCM_63381" = "y" ]; then
    define_string BRCM_CHIP "63381"
fi
if [ "$BRCM_47189" = "y" ]; then
    define_string BRCM_CHIP "47189"
fi
if [ "$BRCM_4908" = "y" ]; then
    define_string BRCM_CHIP "4908"
fi
endmenu


string "Build Multi-architecture userspace" BRCM_BUILD_MULTIARCH

string "Board ID" BRCM_BOARD_ID
string "Voice Board ID" BRCM_VOICE_BOARD_ID

    define_string BRCM_GPON_SERIAL_NUMBER ""
    define_string BRCM_GPON_PASSWORD ""
    define_string BRCM_GPON_CT_LOID ""
    define_string BRCM_GPON_CT_PASSWORD ""

if [ "$BRCM_6838" = "y" ]; then
    bool 'FTTDP support' BUILD_BRCM_FTTDP
    string "XDSL_DISTPOINT support" BUILD_BRCM_XDSL_DISTPOINT
    if [ "$BUILD_BRCM_XDSL_DISTPOINT" != "" ]; then
        choice 'XDSL tacana interface'   \
          "RGMII0    BRCM_XDSL_DISTPOINT_USE_RGMII0  \
           RGMII1    BRCM_XDSL_DISTPOINT_USE_RGMII1" RGMII0
        bool 'XDSL_DISTPOINT G.999.1' BRCM_XDSL_DISTPOINT_USE_G9991
        if [ "$BRCM_XDSL_DISTPOINT_USE_G9991" = "y" ]; then
            int 'XDSL_DISTPOINT inband address' BRCM_XDSL_DISTPOINT_INBAND_ADDRESS 6
        fi
    fi
fi

if [ "$BRCM_6838" = "y" -o "$BRCM_6858" = "y" ]; then
    tristate ' Optical WAN detect' BRCM_DRIVER_OPTICALDET
fi

int 'Flash memory block size in Kbytes' BRCM_FLASHBLK_SIZE
int 'Percent of Flash for auxillary file system 0-80' BRCM_AUXFS_PERCENT
int 'Number of Mac addresses' BRCM_NUM_MAC_ADDRESSES
string "Base Mac address" BRCM_BASE_MAC_ADDRESS
int 'PSI Size' BRCM_PSI_SIZE
# there is also a BUILD_BACKUP_PSI below.  Consolidate these two?
int 'Backup Psi Support: 0-not support,1-support' BRCM_BACKUP_PSI

int 'Main Thread Number for CMT core' BRCM_MAIN_TP_NUM

int 'MISC1 partition SIZE' BRCM_MISC1_PARTITION_SIZE 0
int 'MISC2 partition SIZE' BRCM_MISC2_PARTITION_SIZE 0
int 'MISC3 partition SIZE' BRCM_MISC3_PARTITION_SIZE 0
int 'MISC4(Data) partition SIZE' BRCM_MISC4_PARTITION_SIZE 4


endmenu


###################################################################################
mainmenu_option next_comment
comment 'Toolchain selection'

if [ "$BRCM_6858" = "y" -o "$BRCM_4908" = "y"  ]; then
    choice 'Userspace build architecture ' \
        "arm         USER_ARCH_ARM
         aarch64     USER_ARCH_AARCH64" arm

    if [ "$USER_ARCH_AARCH64" = "y" ]; then
        define_string PROFILE_ARCH "aarch64"
    else
        define_string PROFILE_ARCH "arm"
    fi
    define_string KERNEL_ARCH "aarch64"
else
    if [ "$BRCM_63138" = "y" -o "$BRCM_63148" = "y" -o "$BRCM_47189" == "y"  ]; then
        define_string PROFILE_ARCH "arm"
    else
        if [ "$BRCM_60333" = "y" ]; then
            define_string PROFILE_ARCH "mipsel"
        else
            define_string PROFILE_ARCH "mips"
        fi
    fi
fi

if [ "$PROFILE_ARCH" = "arm" ]; then
    choice ' Base Library' \
        "   UCLIBC              BRCM_UCLIBC
           GLIBC               BRCM_GLIBC" UCLIBC
else
    if [ "$PROFILE_ARCH" = "aarch64" ]; then
        choice ' Base Library' \
            "   GLIBC              BRCM_GLIBC" GLIBC
    else
        choice ' Base Library' \
            "   UCLIBC              BRCM_UCLIBC" UCLIBC
    fi        
fi

endmenu



###################################################################################

mainmenu_option next_comment
comment 'Root file system selection'

choice 'Root file system '   \
      "SQUASHFS                 BRCM_ROOTFS_SQUASHFS   \
       JFFS2+UBIFS+SQUASHFS     BRCM_ROOTFS_ALL" SQUASHFS

int '    SquashFS fragment cache size in # of blocks' BRCM_SQUASHFS_FRAGMENT_CACHE_SIZE 1
choice 'NOR Flash Kernel Image Compression '   \
        "LZMA                BUILD_NOR_KERNEL_LZMA   \
        LZ4                  BUILD_NOR_KERNEL_LZ4" LZMA
if [ "$BRCM_ROOTFS_ALL" = "y" ]; then
    define_string BRCM_KERNEL_ROOTFS "all"
    if [ "$BRCM_6838" != "y" -a "$BRCM_6848" != "y" -a "$BRCM_63138" != "y" -a "$BRCM_63148" != "y" -a "$BRCM_6858" != "y" -a "$BRCM_4908" != "y" ]; then
        bool '    NAND image with 16KB block size' BUILD_NAND_IMG_BLKSIZE_16KB
    fi
    bool '    NAND image with lzma kernel'  BUILD_NAND_KERNEL_LZMA
    bool '    NAND image with lz4 kernel'   BUILD_NAND_KERNEL_LZ4
    bool '    NAND image with 128KB block size' BUILD_NAND_IMG_BLKSIZE_128KB
    bool '    NAND image with 256KB block size' BUILD_NAND_IMG_BLKSIZE_256KB
    bool '    NAND image with 512KB block size' BUILD_NAND_IMG_BLKSIZE_512KB
    bool '    NAND image with 1024KB block size' BUILD_NAND_IMG_BLKSIZE_1024KB
    bool '    Mount UBI ROOTFS as read-write (required by Modular Software Update and OSGi)' BRCM_ROOTFS_RW
    bool '    Include MTD UTILS diagnostics on device' BUILD_MTDUTILS 
else
    define_string BRCM_KERNEL_ROOTFS "squashfs"
fi

bool 'Enable boot from RAMDISK support' BRCM_RAMDISK_BOOT_EN
if [ "$BRCM_RAMDISK_BOOT_EN" = "y" ]; then
    int '    RAMDISK size (if not used, kernel will release it automatically)' BRCM_RAMDISK_SIZE 8192
fi

bool 'Enable NFS Mount' BRCM_NFS_MOUNT_EN

bool 'Enable Incremental Image loading' BRCM_INCREMENTAL_IMAGE_LOAD

endmenu


###################################################################################

# mainmenu_option next_comment
# comment 'Bootloader selection'


# endmenu

###################################################################################

mainmenu_option next_comment
comment 'Kernel configuration selection'

choice 'Linux Version '   \
       "Linux_3.4_Rt       LINUX_3_4_0_RT   \
        Linux_3.14          LINUX_3_14_0 \
        Linux_4.1_       LINUX_4_1_0" Linux_3.4_Rt
       
if [ "$LINUX_3_4_0_RT" = "y" ]; then
    define_string PROFILE_KERNEL_VER "LINUX_3_4_0_RT"
fi
       
if [ "$LINUX_3_14_0" = "y" ]; then
    define_string PROFILE_KERNEL_VER "LINUX_3_14_0"
fi
if [ "$LINUX_4_1_0" = "y" ]; then
    define_string PROFILE_KERNEL_VER "LINUX_4_1_0"
fi


bool 'Enable kernel SMP support' BRCM_SMP_EN
bool 'Enable kernel preemption' BRCM_KERNEL_PREEMPT
int  'Scheduler RT period' BRCM_SCHED_RT_PERIOD 1000000
int  'Scheduler RT runtime' BRCM_SCHED_RT_RUNTIME 1000000
bool 'Scheduler RT RQ sharing' BRCM_SCHED_RT_SHARE
bool 'High resolution timer support' BRCM_CONFIG_HIGH_RES_TIMERS
bool 'Count cycles spent in HardIRQ' BCM_HARDIRQ_COUNT_CYCLES
bool 'CGROUPS' BCM_CGROUPS
if [ "$BCM_CGROUPS" = "y" ]; then
    bool '  Broadcom CGROUPS modifications' BCM_CGROUP_BCM
fi
bool 'Enable compiled-in kernel cmdline'  BCM_KERNEL_CMDLINE_BOOL
if [ "$BCM_KERNEL_CMDLINE_BOOL" = "y" ]; then
    string '  CMDLINE' BCM_KERNEL_CMDLINE
    bool '  Override cmdline from bootloader with this cmdline' BCM_KERNEL_CMDLINE_OVERRIDE
fi
bool 'Enable Android support' BRCM_ANDROID
if [ "$BRCM_6838" = "y" ]; then
  bool 'Support 512MB DDR' BCM_SUPPORT_512MB_DDR
fi
bool 'Enable Packet Forwarding between two WAN Interfaces' BRCM_WAN_2_WAN_FWD_ENABLED

mainmenu_option next_comment
comment 'Kernel Cryptographic selection'

bool "Cryptographic API" BRCM_KERNEL_CRYPTO

dep_bool '  HMAC support' BRCM_KERNEL_CRYPTO_HMAC $BRCM_KERNEL_CRYPTO
dep_bool '  Null algorithms' BRCM_KERNEL_CRYPTO_NULL $BRCM_KERNEL_CRYPTO
dep_bool '  MD5 digest algorithms' BRCM_KERNEL_CRYPTO_MD5 $BRCM_KERNEL_CRYPTO
dep_bool '  SHA1 digest algorithms' BRCM_KERNEL_CRYPTO_SHA1 $BRCM_KERNEL_CRYPTO
if [ "$BRCM_4908" = "y" ]; then
   dep_bool '  SHA2 digest algorithms' BRCM_KERNEL_CRYPTO_SHA2 $BRCM_KERNEL_CRYPTO
fi
dep_bool '  DES and Triple DES EDE cipher algorithms' BRCM_KERNEL_CRYPTO_DES $BRCM_KERNEL_CRYPTO
dep_bool '  AES cipher algorithms' BRCM_KERNEL_CRYPTO_AES $BRCM_KERNEL_CRYPTO

endmenu


mainmenu_option next_comment
comment 'Misc Drivers (other drivers are grouped with their features)'

bool 'PCI' BRCM_DRIVER_PCI

dep_bool '  Enable Spread Spectrum Clocking' BRCM_PCIE_SSC

if [ "$BRCM_63138" = "y" -o "$BRCM_63148" = "y" -o "$BRCM_6858" = "y" -o "$BRCM_4908" = "y" ]; then
   dep_bool '  PCI Express repower module' BRCM_PCIE_PLATFORM $BRCM_DRIVER_PCI
   dep_bool '  Use PCI MSI Interrupts ' BRCM_DRIVER_PCI_MSI $BRCM_DRIVER_PCI
fi

if [ "$BRCM_6838" = "y" -o "$BRCM_6848" = "y" -o "$BRCM_63138" = "y" -o "$BRCM_63148" = "y" -o "$BRCM_6858" = "y" -o "$BRCM_4908" = "y" ]; then
   tristate 'I2C' BRCM_DRIVER_I2C
fi

if [ "$BRCM_63138" = "y" -o "$BRCM_4908" = "y" ]; then
   tristate 'High Speed UART' BRCM_DRIVER_HS_UART
fi

if [ "$BRCM_63138" = "y" -o "$BRCM_4908" = "y" -o "$BRCM_6858" = "y" ]; then
   bool 'EMMC' BRCM_DRIVER_EMMC
fi

if [ "$BRCM_63148" = "y" -o "$BRCM_63138" = "y" -o "$BRCM_4908" = "y" -o "$BRCM_6858" = "y" ]; then
   tristate 'I2S' BRCM_DRIVER_I2S
fi

tristate 'ISDN' BRCM_DRIVER_ISDN

bool 'EXT_TIMER' BRCM_DRIVER_EXT_TIMER

bool 'WATCHDOG_TIMER' BRCM_DRIVER_WDT

if [ "$BRCM_6838" -o "$BRCM_6848" = "y" -o "$BRCM_6858" = "y" -o "$BRCM_4908" = "y" ]; then
bool 'PMC' BRCM_DRIVER_PMC
fi

if [ "$BRCM_63138" = "y" -a "$BRCM_SMP_EN" = "y" ]; then
bool 'ACP' BRCM_DRIVER_ACP
  if [ "$BRCM_DRIVER_ACP" = "y" ]; then
    int 'Reserved Memory Size for ACP in megabytes' BRCM_ACP_SIZE 16
  fi
fi

endmenu


endmenu



###################################################################################

mainmenu_option next_comment
comment 'Major Feature Selection'

choice 'Select Configuration System' \
	"BASE_SHELL	BUILD_BRCM_BASE_SHELL	\
	 CMS		BUILD_BRCM_CMS	\
	 HNDROUTER 	BUILD_BRCM_HNDROUTER" CMS

if [ "$BUILD_BRCM_CMS" = "y" ]; then
   choice 'Data Model Selection '   \
      "TR98                 BUILD_DM_LEGACY98  \
       Hybrid_TR98+TR181    BUILD_DM_HYBRID    \
       Pure_TR181           BUILD_DM_PURE181   \
       DM_Detect            BUILD_DM_DETECT    " Hybrid_TR98+TR181
   bool 'Build CMS for DESKTOP LINUX ' DESKTOP_LINUX
   if [ "$DESKTOP_LINUX" = "y" ]; then
       define_string PROFILE_ARCH "i386"
   fi
elif [ "$BUILD_BRCM_HNDROUTER" = "y" ]; then
   comment 'Build HND Router'
   bool '   Build HND Mfg image' BUILD_HND_MFG
   bool '   Build HND NIC image' BUILD_HND_NIC
else
   bool 'Build Generic Config tools' BUILD_GENCFG_TOOLS
fi

tristate2 'Busybox' BUILD_BUSYBOX
if  [ "$BUILD_BUSYBOX" = "dynamic" -o "$BUILD_BUSYBOX" = "static" ]; then
  choice 'Busybox Feature Group '   \
      "Lite    BUILD_BUSYBOX_BRCM_LITE   \
       Full    BUILD_BUSYBOX_BRCM_FULL   \
       Vanilla BUILD_BUSYBOX_BRCM_VANILLA " Full
  bool '   Support Wget Https in busybox' BUILD_WGET_HTTPS
  bool '   Support gunzip in busybox' BUILD_BUSYBOX_GUNZIP
  bool '   Support gzip in busybox' BUILD_BUSYBOX_GZIP
  bool '   Support untar in busybox' BUILD_BUSYBOX_UNTAR
  bool '   Support tar in busybox' BUILD_BUSYBOX_TAR
  bool '   Support telnet in busybox' BUILD_BUSYBOX_TELNET
  bool '   Support vi in busybox' BUILD_BUSYBOX_VI
  bool '   Support awk in busybox' BUILD_BUSYBOX_AWK
  bool '   Support pidof in busybox' BUILD_BUSYBOX_PIDOF
  bool '   Support ntpd in busybox' BUILD_BUSYBOX_NTPD
fi
bool 'Enable IPV6' BUILD_IPV6
tristate2 'Interface Grouping' BUILD_VCONFIG
bool 'Prompt for internal Broadcom Engineering Parameters' BUILD_BRCM_INTERNAL

tristate 'Broadcom Speed Service' BRCM_DRIVER_SPDSVC

endmenu



###################################################################################

if [ "$BRCM_63268" = "y" -o "$BRCM_63138" = "y" -o "$BRCM_63381" = "y" -o "$BRCM_63148" = "y" ]; then

    mainmenu_option next_comment
    comment 'DSL/XTM selection'

    #
    # These phy selections are mostly not used.  Put here for future cleanup.
    #
    if [ "$BRCM_63268" = "y" -o "$BRCM_63138" = "y" -o "$BRCM_63381" = "y" -o "$BRCM_63148" = "y" ]; then
       choice 'xDSL PHY '   \
          "ADSL            BUILD_PHY_ADSL   \
           VDSL            BUILD_PHY_VDSL \
           Multi-mode      BUILD_PHY_MULTIMODE" Multi-mode
    fi

    if [ "$BRCM_63268" = "y" -o "$BRCM_63138" = "y" -o "$BRCM_63381" = "y" -o "$BRCM_63148" = "y" ]; then
        bool '    Support xDSL Bonding' BRCM_PHY_BONDING
        bool '    Support xDSL Multi-PHY' BRCM_MULTI_PHY
        bool '    Support xDSL External Bonding' BRCM_EXT_PHY_BONDING
    fi

    if [ "$BRCM_63268" = "y" -o "$BRCM_63138" = "y" -o "$BRCM_63381" = "y" -o "$BRCM_63148" = "y" ]; then
        bool '    Support xDSL 5-band Bonding' BRCM_PHY_BONDING5B
        bool '    Support xDSL G.inp Retransmission' BRCM_PHY_GINP_RTX
        bool '    Support xDSL Multiple Bonding PHY' BRCM_PHY_BONDING_C0
    fi

    if [ "$BRCM_63138" = "y" ]; then
        bool '    Support xDSL G.fast' BRCM_PHY_GFAST
    fi

    if [ "$BRCM_PHY_GFAST" = "y" ]; then
        bool '    Support xDSL G.fast Combo' BRCM_PHY_GFASTCOMBO
    fi

    choice 'xDSL standard'   \
        "ANNEX_A     BRCM_ADSL_ANNEX_A     \
         ANNEX_B     BRCM_ADSL_ANNEX_B     \
         ANNEX_C     BRCM_ADSL_ANNEX_C     \
         SADSL       BRCM_ADSL_SADSL" ANNEX_A

    if [ "$BRCM_ADSL_ANNEX_A" = "y" ]; then
        define_string BRCM_ADSL_STANDARD "ANNEX_A"
        define_string CPE_ANNEX_A "y"
    fi
    if [ "$BRCM_ADSL_ANNEX_B" = "y" ]; then
        define_string BRCM_ADSL_STANDARD "ANNEX_B"
        define_string CPE_ANNEX_B "y"
    fi
    if [ "$BRCM_ADSL_ANNEX_C" = "y" ]; then
        define_string BRCM_ADSL_STANDARD "ANNEX_C"
    fi
    if [ "$BRCM_ADSL_SADSL" = "y" ]; then
        define_string BRCM_ADSL_STANDARD "SADSL"
    fi

    tristate 'xDSL Driver' BRCM_DRIVER_ADSL

    # BUILD_DSL is for CMS.  It just means some/any DSL is enabled on the system.
    if [ "$BRCM_DRIVER_ADSL" = "m" -o "$BRCM_DRIVER_ADSL" = "y" ]; then
        define_bool BUILD_DSL "y"

        if [ "$BUILD_XDSLCTL" != "static" -a "$BUILD_XDSLCTL" != "dynamic" ]; then
            define_tristate2 BUILD_XDSLCTL "dynamic"
        fi
        bistate2 '    xDSL Control Utility' BUILD_XDSLCTL
        bool '    DSL Diag daemon' BUILD_DSLDIAGD
        bool '    DSL Loop Diagnostics' BUILD_DSL_LOOP_DIAG
        bool '    Support xDSL Phy Loopback' BRCM_PHY_LOOPBACK
        bool '    DSL SELT TEST' BUILD_DSL_SELT_TEST


        if [ "$BRCM_DRIVER_XTM" != "y" -a "$BRCM_DRIVER_XTM" != "m" ]; then
            define_tristate BRCM_DRIVER_XTM "m"
        fi
        bistate 'XTM Driver' BRCM_DRIVER_XTM

        if [ "$BUILD_XTMCTL" != "static" -a "$BUILD_XTMCTL" != "dynamic" ]; then
            define_tristate2 BUILD_XTMCTL "dynamic"
        fi
        bistate2 '    XTM Control Utility' BUILD_XTMCTL
        bool '    ATM as WAN Interface' BUILD_ATMWAN
        bool '    PTM as WAN Interface' BUILD_PTMWAN
        if [ "$BUILD_ATMWAN" = "y" ]; then
            define_bool BUILD_ATMLOOPBACK "y"
        else
            define_bool BUILD_ATMLOOPBACK "n"
            define_bool BUILD_QUICKSETUP "n"
        fi
        if [ "$BRCM_EXT_PHY_BONDING" = "y" ]; then
            tristate 'External xDSL Bonding Driver' BRCM_DRIVER_EXT_BONDING
        else
            define_tristate BRCM_DRIVER_EXT_BONDING "n"
        fi
        if [ "$BRCM_63138" = "y" ]; then
            if [ "$BUILD_DSL" = "y" ]; then
                bool '    Support xDSL/XTM Tx/Rx IUDMA' BRCM_DSL_TX_RX_IUDMA
            else
               define_bool BRCM_DSL_TX_RX_IUDMA "n"
            fi
        fi
    else
        define_bool BUILD_DSL "n"
        define_tristate2 BUILD_XDSLCTL "n"
        define_bool BUILD_DSLDIAGD "n"
        define_bool BUILD_DSL_LOOP_DIAG "n"
        define_tristate BRCM_DRIVER_XTM "n"
        define_tristate2 BUILD_XTMCTL "n"
        define_bool BUILD_ATMWAN "n"
        define_bool BUILD_PTMWAN "n"
        define_bool BUILD_ATMLOOPBACK "n"
        define_bool BUILD_QUICKSETUP "n"
        define_tristate BRCM_DRIVER_EXT_BONDING "n"
    fi

    endmenu
fi



###################################################################################


if [ "$BRCM_6838" = "y" -o "$BRCM_6848" = "y" -o "$BRCM_6858" = "y" ]; then

    mainmenu_option next_comment
    comment 'GPON Selection'

    if [ "$BRCM_6838" = "y" -o "$BRCM_6848" = "y" -o "$BRCM_6858" = "y" ]; then
       tristate 'GPON Driver' BRCM_DRIVER_GPON

       if [ "$BRCM_6838" = "y" -o "$BRCM_6848" = "y" -o "$BRCM_6858" = "y" ]; then
           int 'Number of GEM Ports (32-256)' BCM_MAX_GEM_PORTS 256
       fi

       if [ "$BRCM_DRIVER_GPON" = "m" -o "$BRCM_DRIVER_GPON" = "y" ]; then
           # BUILD_GPON is for CMS, it just means we have GPON on this system.
           define_string BUILD_GPON "y"
           # what are these two for?  Cannot find any files that use these
           define_string BRCM_GPON "y"
           define_string BRCM_OMCI "y"
       fi

       # maybe this should be moved to the management protocols section
       bool 'Support GPON OMCI' BUILD_OMCI

       tristate2 'GPONIF Utility' BUILD_GPONIF
       tristate2 'GPOND Utility' BUILD_GPOND
       tristate2 'GPONCTL Utility' BUILD_GPONCTL

      choice ' GponRG'   \
         "GponRGt-OMCI-Light    USE_GPONRG_OMCI_LIGHT \
          GponRG-OMCI-Full      USE_GPONRG_OMCI_FULL \
          None                  USE_GONRG_NONE" \
          GponRG-OMCI-Light
      if [ "$USE_GPONRG_OMCI_LIGHT" = "y" ]; then
        define_string BUILD_GPONRG_OMCI_LIGHT "y"
      else
        define_string BUILD_GPONRG_OMCI_LIGHT ""
      fi
      if [ "$USE_GPONRG_OMCI_FULL" = "y" ]; then
        define_string BUILD_GPONRG_OMCI_FULL "y"
        bool 'Support GPON OMCI TR69 dual stack' BUILD_OMCI_TR69_DUAL_STACK
        bool 'Disable RG/ONT mixed mode for LAN ports' BRCM_NO_LAN_PORTS_MIXED_MODE
      else
        define_string BUILD_GPONRG_OMCI_FULL ""
      fi
      if [ "$USE_GONRG_NONE" = "y" ]; then
        define_string BUILD_GPON_ONU "y"
        bool 'Support GPON OMCI TR69 dual stack' BUILD_OMCI_TR69_DUAL_STACK
      else
        define_string BUILD_GPON_ONU ""
      fi
      if [ "$USE_GPONRG_OMCI_LIGHT" != "y" ]; then
        bool 'Enable 802.1Q mode ' BCM_GPON_802_1Q_ENABLED
      fi
      bool 'Enable GPON-ActiveE Auto Switch' BCM_GPON_AE_AUTO_SWITCH
    fi

    choice 'GPON ONU Type' \
            "SFU    BRCM_GPON_SFU  \
            HGU     BRCM_GPON_HGU  \
            None    BRCM_GPON_NONE" HGU
    if [ "$BRCM_GPON_SFU" = "y" ]; then
        define_string GPON_ONU_TYPE "GPON_SFU"
    fi

    if [ "$BRCM_GPON_HGU" = "y" ]; then
        define_string GPON_ONU_TYPE "GPON_HGU"
    fi

    endmenu

fi

###################################################################################

if [ "$BRCM_6838" = "y" -o "$BRCM_6848" = "y" -o "$BRCM_6858" = "y" -o "$BUILD_BRCM_INTERNAL" = "y" ]; then

    mainmenu_option next_comment
    comment 'EPON Selection'
   
    if [ "$BUILD_BRCM_INTERNAL" = "y" ]; then
        tristate 'EPON LUE Driver' BRCM_DRIVER_EPON
        tristate 'EPON Control Utility' BUILD_EPONCTL
    fi
    if [ "$BRCM_6838" = "y" -o "$BRCM_6848" = "y" -o "$BRCM_6858" = "y" ]; then
        tristate 'EPON Stack Driver' BRCM_EPON_STACK
        int      'EPON Stack Driver Implementation' BRCM_EPON_STACK_IMPL     
        tristate 'EPON Control Utility' BUILD_EPONCTL
        bool     'EPON Clock Transport Support' EPON_CLOCK_TRANSPORT
    fi
    
    if [ "$BRCM_6858" = "y" ]; then
        bool "Rate 10G Support" EPON_10G_SUPPORT
    fi

    bool 'EPON SDK' BUILD_EPON_SDK

    if  [ "$BUILD_EPON_SDK" = "y" ]; then
        mainmenu_option next_comment
            comment '    OAM Stack Selection'
            bool 'Broadcom  ' BUILD_EPON_BCM_OAM
            bool 'CTC      ' BUILD_EPON_CTC_OAM
            bool 'DPoE     ' BUILD_EPON_DPOE_OAM
        endmenu
        bool 'EPON SDK VOICE OAM' BUILD_EPON_SDK_VOICE_OAM
        bool 'EPON as WAN' BUILD_EPONWAN
        bool 'Override EPON MAC Address In Personality' OVERRIDE_EPON_MAC_ADDR
        if [ "$OVERRIDE_EPON_MAC_ADDR" = "y" ]; then
            bool 'Multiple LLID SUpport' MLLID_SUPPORTED
        fi
        choice '  EPON ONU Type' \
            "SFU    BRCM_EPON_SFU  \
            SBU    BRCM_EPON_SBU  \
            HGU    BRCM_EPON_HGU  " SFU
        if [ "$BRCM_EPON_SFU" = "y" ]; then
            define_string EPON_ONU_TYPE "EPON_SFU"
        fi
        if [ "$BRCM_EPON_SBU" = "y" ]; then
            define_string EPON_ONU_TYPE "EPON_SBU"
        fi
        if [ "$BRCM_EPON_HGU" = "y" ]; then
            define_string EPON_ONU_TYPE "EPON_HGU"
        fi

        if [ "$BUILD_BRCM_INTERNAL" = "y" ]; then
            bool 'UNI 2 UNI Communication' EPON_UNI_UNI_ENABLED
            bool 'Unresolved Downstream Forward' EPON_DS_DLF_FORWARD
        fi
    fi

    endmenu
fi

###################################################################################

mainmenu_option next_comment
comment 'Ethernet, Switch, and VLAN Selection'

tristate 'Ethernet Driver' BRCM_DRIVER_ETHERNET
if [ "$BRCM_DRIVER_ETHERNET" = "y" -o "$BRCM_DRIVER_ETHERNET" = "m" ]; then
    bool '    Support Configuration for Ethernet Speed/Type' BRCM_DRIVER_ETHERNET_CONFIG

    bool 'Ethernet as WAN' BUILD_ETHWAN

    if [ "$BRCM_4908" = "y" ]; then
        bool '    Enable GMAC-Only Traffic (No RDP)' BRCM_ENET_4908_GMAC
        bool '    Enable Multiple Switch IMP Ports' BRCM_ENET_MULTI_IMP_SUPPORT
    fi
    if [ "$BRCM_63268" = "y" ]; then
        bool '    Enable GMAC-Only Traffic ' BRCM_ENET_4908_GMAC
    fi

    if [ "$BRCM_63268" = "y" ]; then
      define_int BCM_DEF_NR_RX_DMA_CHANNELS 2
      define_int BCM_DEF_NR_TX_DMA_CHANNELS 2
    fi
    if [ "$BRCM_63381" = "y" ]; then
      define_int BCM_DEF_NR_RX_DMA_CHANNELS 1
      define_int BCM_DEF_NR_TX_DMA_CHANNELS 1
    fi

    if [ "$BRCM_DRIVER_ETHERNET" = "y" -o "$BRCM_DRIVER_ETHERNET" = "m" ]; then
        if [ "$BRCM_63268" = "y" ]; then
            tristate 'Support for GMAC' BRCM_GMAC
            if [ "$BRCM_GMAC" = "y" -o "$BRCM_GMAC" = "m" ]; then
                tristate2 'GMAC Control Utility' BUILD_GMACCTL
            fi
        fi
    fi
fi

choice 'Switch Scheduling Mode (SP = strict priority, WRR = weighted round robin)' \
    "SP       BRCM_SWITCH_SCHED_SP  \
     WRR      BRCM_SWITCH_SCHED_WRR " SP

bool 'Allow Real HW Switching (using physical HW switch)' BUILD_BCM_ALLOW_REAL_HW_SWITCHING
bool 'ETHSWCTL Utility' BUILD_ETHSWCTL
dep_bool 'SWITCHMDK' BUILD_SWMDK $BUILD_ETHSWCTL
if [ "$BUILD_SWMDK" = "y" ]; then
    bool "External Switch Present" BRCM_EXT_SWITCH
    if [ "$BRCM_EXT_SWITCH" = "y" ]; then
       int "External Switch Number" BRCM_EXT_SWITCH_TYPE 53115
       string "External Switch Revision" BRCM_EXT_SWITCH_REV "a0"
       if [ "$BRCM_63268" = "y" -o "$BRCM_63381" = "y" ]; then
          define_bool BRCM_PORTS_ON_INT_EXT_SW "y"
       else
          define_bool BRCM_PORTS_ON_INT_EXT_SW "n"
       fi
       bool "MAC Based Port Trunking (LAG)" BRCM_SWITCH_PORT_TRUNK_SUPPORT
    else
        define_int BRCM_EXT_SWITCH_TYPE 0
        define_string BRCM_EXT_SWITCH_REV ""
    fi
    bool "54616 PHY Support" BCM_PHY_54616
fi
dep_bool 'MDKSHELL' BUILD_MDK_SHELL $BUILD_SWMDK

tristate 'VLAN Driver' BRCM_DRIVER_VLAN
tristate2 'VLAN Control Utility' BUILD_VLANCTL
if [ "$BUILD_VLANCTL" == "dynamic" -o "$BUILD_VLANCTL" == "static" ]; then
  bool 'Support LAN Side Vlan' BUILD_LANVLAN
  bool 'Support VLAN Aggregation' BUILD_VLAN_AGGR
  bool 'Assign Same MAC address to Routed WAN Interface as root' BRCM_VLAN_ROUTED_WAN_USES_ROOT_DEV_MAC
fi

bool 'Ethtool Support' BUILD_ETHTOOL
if [ "$BUILD_ETHTOOL" = "y" ]; then
   bool 'Build Ethtool Application' BUILD_ETHTOOL_APP
fi

endmenu



###################################################################################

mainmenu_option next_comment
comment 'USB, SATA and Storage Options Selection'

bool 'SATA support' BUILD_SATA
tristate '    SATA compliance test utility' BRCM_DRIVER_SATA_TEST $BUILD_SATA
if [ "$BRCM_DRIVER_SATA_TEST" = "y"  -o "$BRCM_DRIVER_SATA_TEST" = "m" ] ; then
    define_string BUILD_SATA_TEST "y"
fi

dep_bool 'USB Host' LINUX_DRIVER_USB_HOST $BRCM_DRIVER_PCI
dep_bool '    USB Network Communication Class device support' LINUX_DRIVER_USBNET $LINUX_DRIVER_USB_HOST
if [ "$BRCM_DRIVER_PKTFLOW" = "y" -o "$BRCM_DRIVER_PKTFLOW" = "m" ] && [ "$LINUX_DRIVER_USBNET" = "y" ] ; then
    bool '         USBNET/LTE SW Acceleration Support' BRCM_DRIVER_PKTFLOW_USBNET
fi
dep_bool '    USB Mass Storage Support (experimental)' LINUX_KERNEL_USBMASS $LINUX_DRIVER_USB_HOST
dep_bool '    USB DeviceFS' LINUX_KERNEL_USB_DEVICEFS $LINUX_DRIVER_USB_HOST

bool 'LIBUSB support' BUILD_LIBUSB

# this is the old way, which links ftpd with storge, will clean up after samba
tristate2 'Ftp Server' BUILD_FTPD
if [ "$BUILD_FTPD" == "dynamic" -o "$BUILD_FTPD" == "static" ]; then
  bool '        Support for storage'  BUILD_FTPD_STORAGE
else
  define_string BUILD_FTPD_STORAGE ""
fi


bool 'TR140-Storage Service' BUILD_STORAGESERVICE
if  [ "$BUILD_STORAGESERVICE" = "y" ]; then
   bool '       NTFS-3G support' BUILD_NTFS_3G
   bool '       Samba support' BUILD_SAMBA
fi

tristate 'USB Device' BRCM_DRIVER_USB

endmenu

mainmenu_option next_comment
comment 'Auxillary flash file system selection'

bool 'JFFS2' BUILD_AUXFS_JFFS2
if  [ "$BUILD_AUXFS_JFFS2" = "y" ]; then
    define_string BRCM_KERNEL_AUXFS_JFFS2 "y"
fi

endmenu


###################################################################################

if [ "$BRCM_63268" = "y" -o "$BRCM_63138" = "y" -o "$BRCM_63148" = "y" -o "$BRCM_6838" = "y" -o "$BRCM_6848" = "y" -o "$BRCM_6858" = "y" -o "$BRCM_4908" = "y" ]; then

    mainmenu_option next_comment
    comment 'Moca Selection'

    tristate 'MoCA' BRCM_DRIVER_MoCA
    if [ "$BRCM_DRIVER_MoCA" = "y" -o "$BRCM_DRIVER_MoCA" = "m" ]; then
       bool 'CTP Candidate' BRCM_DRIVER_MoCA_CTP_CANDIDATE
       define_string BUILD_MoCACTL "y"
       bool 'MOCA as WAN'      BUILD_MOCAWAN
       bool 'Support 6802 Moca' BUILD_6802_MOCA
       if [ "$BUILD_6802_MOCA" = "y" ]; then
          bool 'Support 6802 AVS' BRCM_MOCA_AVS
       fi

       bool 'MoCA LAN Disconnected' MOCA_LAN_DISCONN
       bool 'MoCA WAN Disconnected' MOCA_WAN_DISCONN

       tristate2 'MoCA Daemon' BUILD_MoCAD
       tristate2 'MoCA Programmer' BUILD_MoCAP
       if [ "$BUILD_MoCAD" = "dynamic" -o "$BUILD_MoCAD" = "static" ]; then
          define_string BUILD_MoCACTL2 "y"
       else
          define_string BUILD_MoCACTL2 ""
       fi
    fi

    endmenu

fi


###################################################################################

if [ "$BRCM_63138" = "y" -o "$BRCM_63381" = "y" ]; then

    mainmenu_option next_comment
    comment 'LTE Selection'

    bool 'LTE' BRCM_DRIVER_LTE
    if [ "$BRCM_DRIVER_LTE" = "y" ]; then
        if [ "$BRCM_DRIVER_PCI" = "y" ]; then
            tristate 'LTE on PCI' BRCM_DRIVER_LTE_PCI
            if [ "$BRCM_DRIVER_LTE_PCI" = "y" -o "$BRCM_DRIVER_LTE_PCI" = "m" ]; then
                bool 'Modem Boot device node' BRCM_DRIVER_LTE_PCI_MODEM_BOOT
            fi
        fi
        if [ "$LINUX_DRIVER_USB_HOST" = "y" -o "$LINUX_DRIVER_USB_HOST" = "m" ]; then
            tristate 'LTE on USB' BRCM_DRIVER_LTE_USB
        fi
                
        choice 'Modem firmware selection'     \
              "samos_wge_mPCIe_EU                   BRCM_LTE_FIRMWARE_SAMOS_WGE_MPCIE_EU     \
               samos_wge_mPCIe_EU_EDN010      BRCM_LTE_FIRMWARE_SAMOS_WGE_MPCIE_EU_EDN010     \
               samos_wge_mPCIe_US                   BRCM_LTE_FIRMWARE_SAMOS_WGE_MPCIE_US     \
               samos_wge_mPCIe_US_EDN011      BRCM_LTE_FIRMWARE_SAMOS_WGE_MPCIE_US_EDN011     \
               samos_wge_pcie                             BRCM_LTE_FIRMWARE_SAMOS_WGE_PCIE " samos_wge_mPCIe_US_EDN011
        if [ "$BRCM_LTE_FIRMWARE_SAMOS_WGE_MPCIE_EU" = "y" ]; then
            define_string BRCM_LTE_FIRMWARE "samos_wge_mPCIe_EU"
        fi
        if [ "$BRCM_LTE_FIRMWARE_SAMOS_WGE_MPCIE_EU_EDN010" = "y" ]; then
            define_string BRCM_LTE_FIRMWARE "samos_wge_mPCIe_EU_EDN010"
        fi
        if [ "$BRCM_LTE_FIRMWARE_SAMOS_WGE_MPCIE_US" = "y" ]; then
            define_string BRCM_LTE_FIRMWARE "samos_wge_mPCIe_US"
        fi
        if [ "$BRCM_LTE_FIRMWARE_SAMOS_WGE_MPCIE_US_EDN011" = "y" ]; then
            define_string BRCM_LTE_FIRMWARE "samos_wge_mPCIe_US_EDN011"
        fi
        if [ "$BRCM_LTE_FIRMWARE_SAMOS_WGE_PCIE" = "y" ]; then
            define_string BRCM_LTE_FIRMWARE "samos_wge_pcie"
        fi
    fi

    endmenu

fi


###################################################################################

mainmenu_option next_comment
comment 'WLAN Selection'

if [ "$BRCM_DRIVER_PCI" = "y" ]; then
    tristate 'WIRELESS Driver' BRCM_DRIVER_WIRELESS
    tristate 'Wireless DHD driver support' BRCM_DRIVER_DHD 
fi

bool 'Wireless WAPI support' BRCM_WAPI

if [ "$BRCM_DRIVER_WIRELESS" = "y" -o "$BRCM_DRIVER_WIRELESS" = "m" ]; then
  string 'Wireless Alternate Build' BRCM_WLALTBLD
fi

if [ "$BRCM_WLALTBLD" = "apsta" ]; then
   bool 'WiFi as WAN'  BUILD_WIFIWAN
else
   define_string BUILD_WIFIWAN ""
fi
choice 'Wireless brand selection'   \
       "MEDIA                                       BRCM_WLMEDIA \
       none                                      WLBRAND_none" none

define_string BRCM_WLBRAND ""
if [ "$BRCM_WLMEDIA" = "y" ]; then
  define_string BRCM_WLBRAND "MEDIA"
fi

comment ' WLAN IMPL selection'
int "Use IMPL selection" BCM_WLIMPL

tristate2 'Wireless Control Utility' BUILD_WLCTL
tristate2 'DHD Control Utility' BUILD_DHDCTL
bool 'Wireless HSPOT V2.0' BUILD_WLHSPOT
bool 'WiFi Blanket' BUILD_WBD
bool 'WiFi Insight' BUILD_WLVISUALIZATION
bool 'Unified Wireless Mangager' BUILD_UNIFIED_WLMNGR

tristate2 'Wireless Network Authentication Service' BUILD_NAS

choice 'Wireless LAN configuration method'   \
       "WPS                                       WLSETUP_WPS \
       none                                      WLSETUP_none" none

if [ "$WLSETUP_WPS" = "y" ]; then
  define_string BUILD_WPS_BTN "dynamic"
  define_string BUILD_LLTD    "dynamic"
  define_string BUILD_WSC     "dynamic"
else
  define_string BUILD_WPS_BTN ""
  define_string BUILD_LLTD    ""
  define_string BUILD_WSC     ""
fi

tristate2 'NVRAM emulation' BUILD_NVRAM

if [ "$LINUX_DRIVER_USB_HOST" = "y" -o "$LINUX_DRIVER_USB_HOST" = "m" ]; then
    dep_tristate '    USB Dongle Wireless'  BRCM_DRIVER_WIRELESS_USBAP $LINUX_KERNEL_USB_DEVICEFS
fi

endmenu



###################################################################################

mainmenu_option next_comment
comment 'Voice/Phone Selection'

bool 'Enable Voice Support' BRCM_VOICE_SUPPORT

if [ "$BRCM_VOICE_SUPPORT" = "y" ]; then
   # ===========================
   # Voice Application selection
   # ===========================
   comment '   ===== VOICE APPLICATION SELECTION ====='

   choice 'Main Voice Application' \
      "SIP        BRCM_VOICE_APP_SIP \
       EPTAPP     BRCM_VOICE_APP_EPTAPP \
       CELL       BRCM_VOICE_APP_CELL \
       " SIP
       

   # SIP app configuration 
   if [ "$BRCM_VOICE_APP_SIP" = "y" ]; then
      mainmenu_option next_comment
      comment '    SIP Configuration Options'
         choice 'SIP Mode' \
            "RFC3261      BRCM_SIP_CCTK_RFC3261  \
             IMS          BRCM_SIP_CCTK_IMS" RFC3261
         bool 'TLS Support' BRCM_SIP_TLS_SUPPORT
         bool 'Route to Active User Only' BRCM_SIP_ROUTE_ACTIVE_USR
         bool 'Force PCMU and PCMA in Invite' BRCM_SIP_FORCE_PCMUA
         bool 'Enable Voice specific DNS' BRCM_SIP_VOICE_DNS
      endmenu
   fi

   # Endpoint application selection and configuration
   if [ "$BRCM_VOICE_APP_EPTAPP" = "y" ]; then
      mainmenu_option next_comment
      comment '    Endpoint Application Configuration Options'
         bool 'Pull-break Dialtone CLI Support' BRCM_EPTAPP_PBDT_CLI_SUPPORT
      endmenu
   fi

   # Endpoint application selection and configuration
   if [ "$BRCM_VOICE_APP_CELL" = "y" ]; then
      mainmenu_option next_comment
      comment '    Cellular Application Configuration Options'
         bool '2G3G CS Voice Support' BRCM_2G3G_VOICE_SUPPORT
      endmenu
   fi

   # ==================
   # Features selection
   # ==================
   comment '   ===== FEATURE SELECTION ====='

   bool 'Announcement Support' BRCM_VOICE_ANNOUNCEMENT

   if [ "$BRCM_63268" = "y" -o "$BRCM_63138" = "y" -o "$BRCM_63148" = "y" ]; then
      bool 'DECT Support' BRCM_VOICE_DECT_SUPPORT
      dep_bool '    Low-level DECT Test' BRCM_VOICE_DECT_TEST $BRCM_VOICE_DECT_SUPPORT
   fi

   mainmenu_option next_comment
   comment '    Locale Selection'
      bool 'North America'   BRCM_VOICE_COUNTRY_NORTH_AMERICA
      bool 'Australia'       BRCM_VOICE_COUNTRY_AUSTRALIA
     #bool 'Austria'         BRCM_VOICE_COUNTRY_AUSTRIA
      bool 'Belgium'         BRCM_VOICE_COUNTRY_BELGIUM
      bool 'Brazil'          BRCM_VOICE_COUNTRY_BRAZIL
      bool 'Chile'           BRCM_VOICE_COUNTRY_CHILE
      bool 'China'           BRCM_VOICE_COUNTRY_CHINA
      bool 'Cyprus'          BRCM_VOICE_COUNTRY_CYPRUS
      bool 'Czech Republic'  BRCM_VOICE_COUNTRY_CZECH
      bool 'Denmark'         BRCM_VOICE_COUNTRY_DENMARK
      bool 'ETSI'            BRCM_VOICE_COUNTRY_ETSI
      bool 'Finland'         BRCM_VOICE_COUNTRY_FINLAND
      bool 'France'          BRCM_VOICE_COUNTRY_FRANCE
      bool 'Germany'         BRCM_VOICE_COUNTRY_GERMANY
      bool 'Hungary'         BRCM_VOICE_COUNTRY_HUNGARY
      bool 'India'           BRCM_VOICE_COUNTRY_INDIA
     #bool 'Ireland'         BRCM_VOICE_COUNTRY_IRELAND
      bool 'Italy'           BRCM_VOICE_COUNTRY_ITALY
      bool 'Japan'           BRCM_VOICE_COUNTRY_JAPAN
      bool 'Netherlands'     BRCM_VOICE_COUNTRY_NETHERLANDS
      bool 'New Zealand'     BRCM_VOICE_COUNTRY_NEW_ZEALAND
      bool 'Norway'          BRCM_VOICE_COUNTRY_NORWAY
     #bool 'Poland'          BRCM_VOICE_COUNTRY_POLAND
     #bool 'Romania'         BRCM_VOICE_COUNTRY_ROMANIA
     #bool 'Slovakia'        BRCM_VOICE_COUNTRY_SLOVAKIA
     #bool 'Slovenia'        BRCM_VOICE_COUNTRY_SLOVENIA
      bool 'Spain'           BRCM_VOICE_COUNTRY_SPAIN
      bool 'Sweden'          BRCM_VOICE_COUNTRY_SWEDEN
      bool 'Switzerland'     BRCM_VOICE_COUNTRY_SWITZERLAND
      bool 'Taiwan'          BRCM_VOICE_COUNTRY_TAIWAN
      bool 'TR57'            BRCM_VOICE_COUNTRY_TR57
      bool 'United Kingdom'  BRCM_VOICE_COUNTRY_UK
   endmenu

   bool 'Low Power State when Idle' BRCM_VOICE_LOW_POWER_IDLE

   if [ "$BRCM_6838" = "y" -o "$BRCM_63268" = "y" -o "$BRCM_63138" = "y" -o "$BRCM_63148" = "y" -o "$BRCM_63381" = "y" ]; then
      bool 'PSTN Support' BRCM_VOICE_PSTN_SUPPORT
   fi

   if [ "$BRCM_63268" = "y" ]; then
      bool 'NTR Support' BRCM_NTR_SUPPORT
      if [ "$BRCM_NTR_SUPPORT" = "y" ]; then
         # Set NTR Options
         if [ "$BRCM_63268" = "y" ]; then
            define_bool BRCM_NTR_BONDING "y"
         fi
         mainmenu_option next_comment
         comment '    NTR Options'
            bool 'Enable NTR MDM (Highly Recommended)' BRCM_NTR_MDM_SUPPORT
            if [ "$BRCM_NTR_BONDING" = "y" ]; then
               choice 'NTR Mode' \
                  "Native                BRCM_NTR_MODE_NATIVE \
                   Compatibility         BRCM_NTR_MODE_COMP \
                   Internal              BRCM_NTR_MODE_INT \
                   Native-Bonding        BRCM_NTR_MODE_NATIVE_BOND \
                   Compatibility-Bonding BRCM_NTR_MODE_COMP_BOND \
                   Internal-Bonding      BRCM_NTR_MODE_INT_BOND" Native
            else
               choice 'NTR Mode' \
                  "Native                BRCM_NTR_MODE_NATIVE \
                   Compatibility         BRCM_NTR_MODE_COMP \
                   Internal              BRCM_NTR_MODE_INT" Native
            fi
            choice 'NTR reference clock' \
               "8KHz                     BRCM_NTR_REF_CLK_8KHZ \
                16KHz                    BRCM_NTR_REF_CLK_16KHZ \
                256KHz                   BRCM_NTR_REF_CLK_256KHZ" 256KHz
         endmenu
      fi
   fi

   bool 'Randomize Port Numbers' BRCM_VOICE_RANDOM_PORTS
   bool 'Recording Support' BRCM_VOICE_RECORDING
   dep_bool 'SRTP Support' BRCM_VOICE_SRTP_SUPPORT $BRCM_VOICE_APP_SIP

   # ==============================
   # Debug/Extra Features selection
   # ==============================
   comment '   ===== EXTRA OPTIONS ====='
   mainmenu_option next_comment
   comment '    General Options'
      bool 'Enable dynamic memory tracking' BRCM_VOICE_MEM_DEBUG
      bool 'Compile with Debug Information' BRCM_VOICE_COMPILE_WITH_DEBUG
      bool 'Strip Symbols' BRCM_VOICE_STRIP_SYMBOLS
   endmenu

   mainmenu_option next_comment
   comment '    DSPHAL Options'
      bool 'Wait for DPLLs to lock' BRCM_VOICE_DPLL_LOCK_WAIT
      bool 'Enable Egress 1KHz debug tone' BRCM_VOICE_DSPHAL_EGRESS_1KHZ_TONE
      bool 'Enable Ingress 1KHz debug tone' BRCM_VOICE_DSPHAL_INGRESS_1KHZ_TONE
      bool 'Enable HAL Audio Capture' BRCM_VOICE_DSPHAL_CAPTURE
   endmenu

   mainmenu_option next_comment
   comment '    SLIC/SLAC Options'
      bool 'Enable Slic/Slac driver debug prints' BRCM_VOICE_SLICSLAC_DEBUG
      bool 'Support Microsemi Slac' BRCM_VRG_SLACVENDOR_CFG_ZARLINK
      bool 'Support SILABS Slac'    BRCM_VRG_SLACVENDOR_CFG_SILABS
   endmenu
fi

endmenu



###################################################################################

mainmenu_option next_comment
comment 'WAN Protocols and VPN'

tristate2 'PPP Daemon' BUILD_PPPD
bool 'Turn on Autodisconn in PPP' PPP_AUTODISCONN

#tristate2 '802.1q/802.1p on WAN support'  BUILD_BRCM_VLAN
bool 'Support Multiple WAN Connections using VLAN ID (VLAN MUX)' BUILD_WANVLANMUX

tristate2 'IPSec' BUILD_IPSEC_TOOLS
if [ "$BUILD_IPSEC_TOOLS" = "static" -o "$BUILD_IPSEC_TOOLS" = "dynamic" ]; then
   if [ "$BRCM_63268" = "y" -o "$BRCM_63138" = "y" -o "$BRCM_63148" = "y" -o "$BRCM_4908" = "y" ]; then
      tristate 'SPU Driver' BRCM_DRIVER_SPU
      tristate 'Cryptodev Linux' BUILD_CRYPTODEV_LINUX
   fi
   if [ "$BRCM_63268" = "y" -o "$BRCM_63138" = "y" -o "$BRCM_63148" = "y" ]; then
      tristate2 '    SPUCTL' BUILD_SPUCTL
   fi
fi

tristate2 'OpenVPN' BUILD_OPENVPN

bool 'Enable L2TP AC tunnel (Client side)' BUILD_L2TPAC

bool 'Enable PPTP AC tunnel (Client side)' BUILD_PPTPAC

bool 'GRE' BUILD_GRE_TUNNEL

bool 'ACCEL_PPTP' BUILD_ACCEL_PPTP

endmenu



###################################################################################

mainmenu_option next_comment
comment 'Firewall, ALGs, and Networking Features'


mainmenu_option next_comment
comment 'Netfilter and firewall selection'

tristate 'Netfilter/firewall/mangling/nat' BRCM_KERNEL_NETFILTER

dep_tristate ' Firewall support' BRCM_KERNEL_NF_FIREWALL $BRCM_KERNEL_NETFILTER
dep_tristate ' Packet mangling support' BRCM_KERNEL_NF_MANGLE $BRCM_KERNEL_NETFILTER
dep_tristate ' NAT support' BRCM_KERNEL_NF_NAT $BRCM_KERNEL_NETFILTER
dep_tristate ' Dynamic DSCP mangling support' BRCM_KERNEL_NF_DYNDSCP $BRCM_KERNEL_NETFILTER
dep_tristate ' Layer 7 filtering support' BRCM_KERNEL_NF_LAYER7_FILTER $BRCM_KERNEL_NETFILTER

dep_tristate '  FTP ALG'  BRCM_KERNEL_NF_NAT_ALG_FTP  $BRCM_KERNEL_NF_NAT
dep_tristate '  SIP ALG'  BRCM_KERNEL_NF_NAT_ALG_SIP  $BRCM_KERNEL_NF_NAT
dep_tristate '  TFTP ALG' BRCM_KERNEL_NF_NAT_ALG_TFTP $BRCM_KERNEL_NF_NAT
dep_tristate '  H323 ALG' BRCM_KERNEL_NF_NAT_ALG_H323 $BRCM_KERNEL_NF_NAT
dep_tristate '  H323 ALG-SIGNAL PROXY' BRCM_KERNEL_NF_NAT_ALG_H323_SIGNAL_PROXY $BRCM_KERNEL_NF_NAT_ALG_H323
dep_tristate '  IRC ALG'  BRCM_KERNEL_NF_NAT_ALG_IRC  $BRCM_KERNEL_NF_NAT
# NOT USED - dep_tristate '  DIRECTX 8 ALG'  BRCM_KERNEL_NF_NAT_ALG_DTX8  $BRCM_KERNEL_NF_NAT
dep_tristate '  Windows Media Player ALG'  BRCM_KERNEL_NF_NAT_ALG_WM  $BRCM_KERNEL_NF_NAT
dep_tristate '  Port Triggering ALG'  BRCM_KERNEL_NF_NAT_ALG_PT  $BRCM_KERNEL_NF_NAT
dep_tristate '  PPTP ALG' BRCM_KERNEL_NF_NAT_ALG_PPTP $BRCM_KERNEL_NF_NAT
dep_tristate '  IPSec ALG' BRCM_KERNEL_NF_NAT_ALG_IPSEC $BRCM_KERNEL_NF_NAT
dep_tristate '  RTSP ALG' BRCM_KERNEL_NF_NAT_ALG_RTSP $BRCM_KERNEL_NF_NAT
dep_tristate '  SNMP ALG' BRCM_KERNEL_NF_NAT_ALG_SNMP $BRCM_KERNEL_NF_NAT
dep_tristate '  TALK ALG' BRCM_KERNEL_NF_NAT_ALG_TALK $BRCM_KERNEL_NF_NAT

dep_tristate ' Logging events' BRCM_KERNEL_NF_LOG $BRCM_KERNEL_NETFILTER

dep_tristate ' Remote access support in PPP IP extension' BRCM_KERNEL_NF_PPPREMOTE $BRCM_KERNEL_NETFILTER

endmenu


bool      'Conntrack-tools' BUILD_CONNTRACK_TOOLS
if [ "$BUILD_CONNTRACK_TOOLS" = "y" ]; then
    define_bool BUILD_LIBNFNETLINK "y"
    define_bool BUILD_LIBMNL "y"
    define_bool BUILD_LIBNETFILTER_QUEUE "y"
    define_bool BUILD_LIBNETFILTER_CTIMEOUT "y"
    define_bool BUILD_LIBNETFILTER_CTHELPER "y"
    define_bool BUILD_LIBNETFILTER_CONNTRACK "y"
fi

tristate2 'IP Firewall' BUILD_IPTABLES
tristate2 'Bridge Firewall' BUILD_EBTABLES
tristate2 'Dynamic ALG Load/Unload Helper' BUILD_DYNAHELPER

tristate2 'Time of Day restrictions' BUILD_TOD
tristate2 'Url Filtering' BUILD_URLFILTER

tristate2 'Bridge Control Utility' BUILD_BRCTL


if [ "$BUILD_BRCM_CMS" = "y" ]; then
   tristate2 'DHCP(server and client)' BUILD_UDHCP
   if [ "$BUILD_UDHCP" == "dynamic" -o "$BUILD_UDHCP" == "static" ]; then
     bool '          Support for DHCP relay'  BUILD_UDHCP_RELAY
     bool '          Server enabled by default'  BRCM_DHCP_SERVER_DEFAULT
     bool '          Client enabled by default'  BRCM_DHCP_CLIENT_DEFAULT
   fi
fi

if [ "$BUILD_BUSYBOX_NTPD" != "y" ]; then
  tristate2 'SNTP support' BUILD_SNTP
fi

choice ' DNS Relay'   \
      "DNS-Probe                                 DRELAY_DNSPROBE \
       DNS-Proxy                                 DRELAY_DPROXY \
       DNS-Proxy-with-Probe                      DRELAY_DPROXYWITHPROBE
       None                                      DRELAY_NONE" \
       DNS-Proxy
if [ "$DRELAY_DNSPROBE" = "y" ]; then
  define_string BUILD_DNSPROBE "dynamic"
  define_string BUILD_DPROXY ""
else
  define_string BUILD_DNSPROBE ""
fi

if [ "$DRELAY_DPROXY" = "y" ]; then
  define_string BUILD_DPROXY "dynamic"
else
  define_string BUILD_DPROXY ""
fi

if [ "$DRELAY_DPROXYWITHPROBE" = "y" ]; then
  define_string BUILD_DPROXY "dynamic"
  define_string BUILD_DPROXYWITHPROBE "dynamic"
else
  define_string BUILD_DPROXYWITHPROBE ""
fi

tristate2 'DNS Redirector' BUILD_DNSSPOOF

if [ "$BUILD_BRCM_CMS" = "y" ]; then
   tristate2 'Dynamic DNS support' BUILD_DDNSD
fi

if [ "$BUILD_VCONFIG" = "static" -o "$BUILD_VCONFIG" = "dynamic" ]; then
  bool ' Advanced DMZ ' BUILD_SUPERDMZ
fi

tristate2 'Iproute2 Utility for Policy Routing' BUILD_IPROUTE2

tristate2 'Dynamic Routing Daemon RIP' BUILD_ZEBRA

tristate2 '   Multicast Proxy (mcpd)' BUILD_MCAST_PROXY
bool      '   Multicast Snooping' BUILD_MCAST_SNOOP

bool ' PCP UPnP IWF ' BUILD_PCP

bool 'Jumbo Frame Support (for Enet/Xtm/GPON only)'  BCM_JUMBO_FRAME
if [ "$BCM_JUMBO_FRAME" = "y" ]; then
if [ "$BRCM_6838" = "y" -o "$BRCM_6848" = "y" -o "$BRCM_6858" = "y" ]; then
  int 'Support for Maximum Payload Size' BCM_MAX_MTU_SIZE
fi
bool '   User Defined Default MTU'  BCM_USER_DEFINED_DEFAULT_MTU
if [ "$BCM_USER_DEFINED_DEFAULT_MTU" = "y" ]; then
int '       User Defined Default MTU Size' BCM_USER_DEFINED_DEFAULT_MTU_SIZE
fi
bool '   Ignore Bridge MTU while forwarding in accelerated path' BCM_IGNORE_BRIDGE_MTU
fi

tristate 'Broadcom Traffic Manager' BRCM_DRIVER_TM
if [ "$BRCM_DRIVER_TM" = "y" -o "$BRCM_DRIVER_TM" = "m" ]; then
     bool ' Broadcom Traffic Manager CLI Support' BUILD_BCMTM
fi

mainmenu_option next_comment
comment 'Traffic Control selection'

bool 'Traffic Control' BRCM_KERNEL_NETQOS
bool '    Rate Limit' BRCM_TC_RATE_LIMIT
bool '    Policing' BRCM_TC_POLICING
if [ "$BRCM_TC_RATE_LIMIT" = "y" -o "$BRCM_TC_POLICING" = "y" ]; then
if [ "$BRCM_KERNEL_NETQOS" = "n" ]; then
  define_bool BRCM_KERNEL_NETQOS "y"
fi
fi

endmenu
bool 'Enable Deep Packet Inspection' BUILD_DPI
if [ "$BUILD_DPI" = "y" ]; then
  define_tristate BRCM_DRIVER_DPI "m"
  if [ "$BRCM_DRIVER_TM" = "y" -o "$BRCM_DRIVER_TM" = "m" ]; then
    bool '    DPI QoS CPU Path (experimental)' BRCM_DRIVER_DPI_QOS_CPU
  fi
fi

bool 'Enable MAP-T MAP-E' BUILD_MAP
if [ "$BUILD_MAP" = "y" ]; then
  define_tristate BRCM_DRIVER_MAP "m"
fi

endmenu



###################################################################################

mainmenu_option next_comment
comment 'Packet Acceleration'


tristate 'Packet Flow Accelerator' BRCM_DRIVER_PKTFLOW
if [ "$BRCM_DRIVER_PKTFLOW" = "y" -o "$BRCM_DRIVER_PKTFLOW" = "m" ]; then
  bool '    IPv6 Support' BRCM_DRIVER_PKTFLOW_IPV6
  bool '    Multicast Support' BRCM_DRIVER_PKTFLOW_MCAST
  bool '    GRE Support' BRCM_DRIVER_PKTFLOW_GRE
  bool '    L2TP Support' BRCM_DRIVER_PKTFLOW_L2TP
  bool '    Per Packet Modification Support' BRCM_DRIVER_PKTFLOW_FEATURE
  bool '    Debug Support' BRCM_DRIVER_PKTFLOW_DEBUG
  tristate2 'Flow Cache Control Utility' BUILD_FCCTL
  if [ "$BRCM_63268" = "y" ]; then
     tristate '    FAP Support' BRCM_DRIVER_FAP
     if [ "$BRCM_DRIVER_FAP" = "y" -o "$BRCM_DRIVER_FAP" = "m" ] && [ "$BRCM_DRIVER_BPM" = "y" -o "$BRCM_DRIVER_BPM" = "m" ]; then
        bool '        GSO Support' BRCM_DRIVER_FAP_GSO
        if [ "$BRCM_DRIVER_FAP_GSO" = "y" ]; then
           bool '          FAP GSO LOOPBACK Support for WLAN' BRCM_DRIVER_FAP_GSO_LOOPBACK
        fi
     fi
  fi

  if [ "$BRCM_DRIVER_FAP" = "y" -o "$BRCM_DRIVER_FAP" = "m" ]; then
     bool '        FAP Layer 2 Bridge' BRCM_DRIVER_FAP_LAYER2
  fi

  if [ "$BRCM_63268" = "y" ]; then
     tristate '    ARL Support' BRCM_DRIVER_ARL
  fi

  if [ "$BRCM_DRIVER_RDPA" = "y" -o "$BRCM_DRIVER_RDPA" = "m" ]; then
     tristate '    Runner Packet Accelerator' BRCM_DRIVER_PKTRUNNER
  fi

  if [ "$BRCM_DRIVER_PKTRUNNER" = "y" -o "$BRCM_DRIVER_PKTRUNNER" = "m" ]; then
     if [ "$BRCM_4908" = "y" ]; then
         int '        Buffer memory reservation(MB)' BRCM_RDP_PARAM1_SIZE 
         int '        Flow memory reservation(MB)' BRCM_RDP_PARAM2_SIZE
     else
        if [ "$BRCM_6858" = "y" ]; then
            int '        FPM Pool memory reservation(MB)' BRCM_RDP_PARAM1_SIZE 
            int '        Runner Table memory reservation(MB)' BRCM_RDP_PARAM2_SIZE
        else
            int '        TM memory reservation(MB)' BRCM_RDP_PARAM1_SIZE 
            int '        MC memory reservation(MB)' BRCM_RDP_PARAM2_SIZE
        fi
     fi
     bool '           Runner GSO Support' BRCM_DRIVER_PKTRUNNER_GSO
  fi

  if [ "$BRCM_63138" = "y" -o "$BRCM_63148" = "y" ]; then
     if [ "$BRCM_DRIVER_PKTRUNNER" = "y" -o "$BRCM_DRIVER_PKTRUNNER" = "m" ]; then
       bool '    Multicast DNAT Support (IPv4 only)' BRCM_DRIVER_PKTRUNNER_MCAST_DNAT
     fi
  fi

  if [ "$BRCM_DRIVER_FAP" = "y" -o "$BRCM_DRIVER_FAP" = "m" ] || [ "$BRCM_DRIVER_RDPA" = "y" -o "$BRCM_DRIVER_RDPA" = "m" ]; then
     bool '    RTP Sequence Check Support (IPv4 mcast only)' BRCM_DRIVER_RTP_SEQ_CHECK
  fi
fi

tristate 'Packet Flow Bonding (experimental)' BRCM_DRIVER_FBOND
if [ "$BRCM_DRIVER_FBOND" = "y" -o "$BRCM_DRIVER_FBOND" = "m" ]; then
  bool '    Debug Support' BRCM_DRIVER_FBOND_DEBUG
  tristate2 'Flow Bonding Control Utility' BUILD_FBCTL
fi

if [ "$BRCM_DRIVER_FAP" = "y" -o "$BRCM_DRIVER_FAP" = "m" -o "$BRCM_DRIVER_RDPA" = "y" -o "$BRCM_DRIVER_RDPA" = "m" ]; then
    tristate '    WIFI Forwarding Driver' BRCM_DRIVER_WIFI_FORWARDING_DRV
    if [ "$BRCM_DRIVER_RDPA" = "y" -o "$BRCM_DRIVER_RDPA" = "m" ]; then
        bool '    DHD Runner Acceleration Support' BRCM_DRIVER_DHD_RUNNER
        if [ "$BRCM_DRIVER_DHD_RUNNER" = "y" -o "$BRCM_DRIVER_DHD_RUNNER" = "m" ]; then
            int '        DHD 0 memory reservation(MB)' BRCM_DHD_PARAM1_SIZE 
            int '        DHD 1 memory reservation(MB)' BRCM_DHD_PARAM2_SIZE
            int '        DHD 2 memory reservation(MB)' BRCM_DHD_PARAM3_SIZE
        fi
    fi
fi

endmenu

###################################################################################

if [ "$BRCM_6838" = "y" -o "$BRCM_6848" = "y" -o "$BRCM_6858" = "y" -o "$BRCM_63138" = "y" -o "$BRCM_63148" = "y" -o "$BRCM_4908" = "y" ]; then

mainmenu_option next_comment
comment 'Runner Data Path API Selection'

  bool '     BUILD_RDPA' BUILD_RDPA

if [ "$BUILD_RDPA" = "y" ]; then
  define_tristate BRCM_DRIVER_BDMF "m"
  define_tristate BRCM_DRIVER_RDPA "m"
  define_tristate BRCM_DRIVER_RDPA_GPL "m"
  define_tristate BRCM_DRIVER_RDPA_GPL_EXT "m"
  define_tristate BRCM_DRIVER_RDPA_MW "m"
  define_tristate BRCM_DRIVER_RDPA_DRV "m"
  bool '    BDMF Shell' BUILD_BDMF_SHELL

  if [ "$BRCM_6838" = "y" -o "$BRCM_6848" = "y" -o "$BRCM_6858" = "y" ]; then
     tristate '    GPON Stack Driver' BRCM_DRIVER_GPON_STACK
     tristate '    Runner Bridge Driver' BRCM_DRIVER_RDPA_BRIDGE
     tristate '    GPON Laser Driver' BRCM_DRIVER_LASER
  fi
  if [ "$BRCM_63138" = "y" -o "$BRCM_63148" = "y" -o "$BRCM_4908" = "y" ]; then
     define_string BUILD_DSL_RUNNER "y"
  fi
  if [ "$BRCM_4908" = "y" ]; then
     define_tristate BRCM_DRIVER_FPM "m"
     if [ "$BRCM_DRIVER_DHD_RUNNER" = "y" ]; then
         define_int BRCM_FPM_POOL_NUM 2
     else
         int ' FPM Pool Number ' BRCM_FPM_POOL_NUM
     fi
     bool ' FPM init based on device tree '  BRCM_FPM_USE_DT
  fi
fi

endmenu

fi
###################################################################################
mainmenu_option next_comment
comment 'Buffer Pool Manager and Ingress QoS'

tristate 'Buffer Pool Manager (BPM)' BRCM_DRIVER_BPM
if [ "$BRCM_DRIVER_BPM" = "y" -o "$BRCM_DRIVER_BPM" = "m" ]; then
    int '    Buffer Memory as % of Total Memory' BRCM_BUF_MEM_PRCNT
    tristate2 '    BPM Control Utility' BUILD_BPMCTL
fi

tristate 'Ingress QoS' BRCM_DRIVER_INGQOS
if [ "$BRCM_DRIVER_INGQOS" = "y" -o "$BRCM_DRIVER_INGQOS" = "m" ]; then
    tristate2 '    Ingress QoS Control Utility' BUILD_IQCTL
fi

endmenu

##########################################################################
mainmenu_option next_comment
comment 'Modular Software (JVM, OSGI, OSGIEE, LinuxEE, LinuxPFP)'

bool 'Enable Java Classpath' BUILD_JVM_CLASSPATH

bool 'Enable JamVM JVM' BUILD_JVM_JAMVM

if  [ "$BUILD_JVM_JAMVM" = "y" ]; then
  int '  Initial Heap Size for JamVM (in kbytes, 4000=4M)' JAMVM_MIN_HEAP_SIZE 4000
  int '  Maximum Heap Size for JamVM (in kbytes, 10000=10M)' JAMVM_MAX_HEAP_SIZE 10000
  int '  Stack Size of Each Thread (in kbytes, 256=256K)' JAMVM_STACK_SIZE_PER_THREAD 256
fi

bool 'Enable Felix OSGI' BUILD_OSGI_FELIX

bool 'Enable TR-181 Execution Environments'  BUILD_MODSW_EE

if [ "$BUILD_MODSW_EE" = y ]; then
   bool '  Enable OSGI Execution Env (EE)' BUILD_MODSW_OSGIEE
   bool '  Enable Linux Execution Env (EE)' BUILD_MODSW_LINUXEE
fi

bool 'Enable Linux Primary Firmware Patch (PFP)' BUILD_MODSW_LINUXPFP

bool 'Enable Managment of Modular SW from CLI' BUILD_MODSW_CLI

bool 'Enable Managment of Modular SW from WebUI' BUILD_MODSW_WEBUI
if  [ "$BUILD_MODSW_WEBUI" = "y" ]; then
   bool '  Allow Admin access (LAN side)' BUILD_MODSW_WEBUI_ADMIN
   bool '  Allow Support access (WAN side)' BUILD_MODSW_WEBUI_SUPPORT
fi


endmenu

##########################################################################
 
# Gen 1 Bootrom
if [ "$BRCM_63268" = "y" ]; then

mainmenu_option next_comment
comment 'Secure Boot'

bool 'Enable Secure Boot' BUILD_SECURE_BOOT
if [ "$BUILD_SECURE_BOOT" = "y" ]; then
   int 'Nor Flash: boot sector size' SECURE_BOOT_NOR_BOOT_SIZE 128
fi

endmenu

fi

###
# Gen 2 Bootrom
if [ "$BRCM_6838" = "y" -o "$BRCM_6848" = "y" -o "$BRCM_63381" = "y" -o "$BRCM_63138" = "y" -o "$BRCM_63148" = "y" ]; then

mainmenu_option next_comment
comment 'Secure Boot'

bool 'Enable Secure Boot' BUILD_SECURE_BOOT

if [ "$BUILD_SECURE_BOOT" = "y" ]; then
  int '  Number of boot blocks ( max: 8 )' SECURE_BOOT_NUM_BOOT_BLKS 8
  int '  Number of secure boot btldr images ( max: 3 less than the number of boot blocks )' SECURE_BOOT_NUM_BTLDR_IMAGES 1

  if [ "$BRCM_63381" = "y" ]; then
    int 'Nor Flash: boot sector size' SECURE_BOOT_NOR_BOOT_SIZE 192
  fi
  if [ "$BRCM_63138" = "y" ]; then
    int 'Nor Flash: boot sector size' SECURE_BOOT_NOR_BOOT_SIZE 384
  fi
  if [ "$BRCM_63148" = "y" ]; then
    int 'Nor Flash: boot sector size' SECURE_BOOT_NOR_BOOT_SIZE 384
  fi
fi

endmenu

fi

###
# Gen 3 Bootrom
if [ "$BRCM_6858" = "y" -o "$BRCM_4908" = "y" ]; then

mainmenu_option next_comment
comment 'Bootrom'

bool 'bootrom boot' BTRM_BOOT_ONLY
if [ "$BTRM_BOOT_ONLY" = "y" ]; then
int 'Boot partition size (Max 1024 Kb)' BTRM_NAND_BOOT_PARTITION_SIZE 1024
int 'Number bootloader images within boot partition (Max 10)' BTRM_NUM_IMAGES_IN_PARTITION 6
int 'Size allocated for each bootloader (Kb)' BTRM_IMAGE_SIZE_ALLOCATION 96
bool 'Enable Secure Boot Builds' BUILD_SECURE_BOOT
fi

if [ "$BUILD_SECURE_BOOT" = "y" ]; then
  bool ' Field mode ROT/ROE includes using field OEM COT' SECURE_BOOT_PROCESS_FLD_OEM_COT
  bool ' AES Encrypt bootloader images within boot partition' SECURE_BOOT_ENCRYPT_BTLDRS
fi

endmenu

fi

##########################################################################

mainmenu_option next_comment
comment 'Other Features'
#
# Power Management Stuff.
#
tristate 'PWRMNGT Driver' BRCM_DRIVER_PWRMNGT
if [ "$BRCM_DRIVER_PWRMNGT" = "m" ]; then
  tristate2 '   PWRCTL' BUILD_PWRCTL
  if [ "$BRCM_63268" = "y" -o "$BRCM_63268" = "y" ]; then
    bool '   Adaptive Voltage Scaling' BRCM_AVS_PWRSAVE
  fi
fi

if [ "$BRCM_6838" = "y" -o "$BRCM_6848" = "y" -o "$BRCM_6858" = "y" ]; then
   tristate 'PMD Driver' BRCM_DRIVER_PMD
   define_bool RDPA_IFILTER_SUPPORT "y"
fi

if [ "$BRCM_6838" = "y" -o "$BRCM_6848" = "y" ]; then
  tristate 'Sim Card' BRCM_DRIVER_SIM_CARD
  bool 'MINIMAL DDR GW' BRCM_MINIGW "n"
fi

if [ "$BRCM_60333" != "y" ]; then
  bool 'Ethernet Auto Power Down and Sleep' BRCM_ETH_PWRSAVE
  if [ "$BRCM_6362" != "y" -a "$BRCM_6328" != "y" ]; then
    bool 'Energy Efficient Ethernet' BRCM_ENERGY_EFFICIENT_ETHERNET
  fi
fi

if [ "$BRCM_63138" = "y" -o "$BRCM_63148" = "y" -o "$BRCM_4908" = "y" ]; then
  bool 'Ethernet Deep Green Mode' BRCM_ETH_DEEP_GREEN_MODE
fi

if [ "$BRCM_63268" = "y" -o "$BRCM_63381" = "y" -o "$BRCM_6838" = "y" -o "$BRCM_6848" = "y" ]; then
  bool 'Automated MIPS clk divider' BRCM_HOSTMIPS_PWRSAVE
fi

if [ "$BRCM_63138" = "y" -o "$BRCM_63148" = "y" -o "$BRCM_4908" = "y" -o "$BRCM_6858" = "y" ]; then
  bool 'Automated CPUFREQ clk divider' BRCM_CPU_FREQ_PWRSAVE
  if [ "$BRCM_CPU_FREQ_PWRSAVE" = "y" ]; then
    int 'Interactive governor target load' BRCM_CPU_FREQ_TARGET_LOAD 20
  fi
fi

if [ "$BRCM_4908" = "y" ]; then
  if [ "$BRCM_CPU_FREQ_PWRSAVE" != "y" ]; then
    bool 'Automated CPUIDLE clk divider' BRCM_CPUIDLE_CLK_DIVIDER
  else
    comment 'Automated CPUIDLE clk divider'
  fi
fi

if [ "$BRCM_63268" = "y" -o "$BRCM_63381" = "y"  -o "$BRCM_63138" = "y" ]; then
  bool 'DDR Self-Refresh Power Saving' BRCM_DDR_SELF_REFRESH_PWRSAVE
fi

if [ "$BRCM_63268" = "y" -o "$BRCM_60333" = "y" -o "$BRCM_6838" = "y" -o "$BRCM_6848" = "y" -o "$BRCM_63138" = "y" -o "$BRCM_63148" = "y" -o "$BRCM_63381" = "y" -o "$BRCM_6858" = "y" ]; then
  bool 'PCIe L1 Active State Power Management' BUILD_WL_IDLE_PWRSAVE
fi

if [ "$BRCM_63268" = "y" ]; then
    choice 'Shutdown Internal 1.2V Regulator'   \
      "Auto          BRCM_1V2REG_AUTO_SHUTDOWN \
       Always        BRCM_1V2REG_ALWAYS_SHUTDOWN \
       Never         BRCM_1V2REG_NEVER_SHUTDOWN" Auto
fi

if [ "$BRCM_63138" = "y"  -o "$BRCM_63148" = "y" ]; then
    bool 'Battery Management Unit' BUILD_BMU

    choice 'Battery Configuration'   \
      "2-Cell          BUILD_BMU_2CELL \
       3-Cell          BUILD_BMU_3CELL \
       none            BUILD_BMU_0CELL" none
fi

if [ "$BRCM_60333" != "y" ]; then
    choice 'NAND Driver selection'   \
      "Standard        BUILD_STANDARD_NAND_DRIVER \
       Legacy          BUILD_LEGACY_NAND_DRIVER" Standard
fi


#
# Trunk Management Support
#
bool 'Trunk Management (802.3ah, 802.1ag, Y.1731)' BUILD_TMS

#
# Hardware Random Number Generator Driver
#
if [ "$BRCM_63268" = "y" -o "$BRCM_63138" = "y" -o "$BRCM_63148" = "y" -o "$BRCM_4908" = "y" ]; then
  tristate 'TRNG Driver' BRCM_DRIVER_TRNG
  tristate2 'RNGD' BUILD_RNGD
fi

bool 'Enable Connection Auto Detection' BUILD_AUTODETECTION

bool 'LED Control Utility' BUILD_LEDCTL

if [ "$BRCM_DRIVER_WDT" = "m" -o "$BRCM_DRIVER_WDT" = "y" ]; then
     define_string BUILD_WDTCTL "y"
fi     

bool 'Suport Backup Config File ' BUILD_BACKUP_PSI
if [ "$BUILD_BACKUP_PSI" = "y" ]; then
    choice 'BACKUP mode' \
       "MIRROR         BUILD_BACKUP_PSI_MIRROR_MODE \
        DEVICE_DEFAULT BUILD_BACKUP_PSI_DEVICE_DEFAULT" BUILD_BACKUP_PSI_MIRROR_MODE
fi
bool 'Build PSICTL utility' BUILD_PSICTL
bool 'Enable Compressed Config File' COMPRESSED_CONFIG_FILE
bool 'Enable backward compatibility of CMS Config Files' CMS_CONFIG_COMPAT
bool 'Ignore unrecognized objects, params, and attrs in CMS Config Files' CMS_CONFIG_IGNORE_UNRECOGNIZED

tristate2 'Internet Printing Protocol support' BUILD_IPPD

bool 'DLNA support' BUILD_DLNA

bool 'HomePlug support' BUILD_HOMEPLUG
if [ "$BUILD_HOMEPLUG" = "y" ]; then
  if [ "$BRCM_60333" != "y" ]; then
    choice 'Select the external HomePlug chip'   \
        "BRCM_60333/60500  BRCM_HOMEPLUG_EXT_CHIP_60333 \
         BRCM_60345/60350/60355  BRCM_HOMEPLUG_EXT_CHIP_60345 \
         BRCM_60321  BRCM_HOMEPLUG_EXT_CHIP_60321"
  else
    bool 'Enable L2 Upgrade' BUILD_PLC_L2UPGRADE
  fi
fi

bool 'IEEE1905 support' BUILD_IEEE1905
if [ "$BUILD_IEEE1905" = "y" ]; then
  bool '  IEEE1905 Golden Node' BUILD_IEEE1905_GOLDENNODE
  bool '  IEEE1905 Registrar' BUILD_IEEE1905_REGISTRAR
  bool '  Topology Web Page'  BRCM_1905_TOPOLOGY_WEB_PAGE

  bool '  Flow Manager Support (experimental)'  BRCM_1905_FM
  if [ "$BRCM_1905_FM" = "y" ]; then
    if [ "$BRCM_DRIVER_WIRELESS" = "y" -o "$BRCM_DRIVER_WIRELESS" = "m" ]; then
      bool '    Auto-connect WDS'  BRCM_1905_AUTO_WDS
    fi
  fi
fi

tristate2 'SSL and Certificate' BUILD_CERT

comment ' Default Configuration'
string "File Name" BRCM_DEFAULTCFG

# Time Synchronization
if [ "$BRCM_6838" = "y" -o "$BRCM_6848" = "y" -o "$BRCM_6858" = "y" ]; then

    # Driver
    tristate 'Time Synchronization' BRCM_DRIVER_TIME_SYNC
    if [ "$BRCM_DRIVER_TIME_SYNC" = "y" -o "$BRCM_DRIVER_TIME_SYNC" = "m" ]; then

        # GPON ToDD
        bool 'Support GPON ToDD' BRCM_GPON_TODD

        # PTP 1588
        bool 'Support PTP 1588' BRCM_PTP_1588
    
        # Sync Clock: 8KHz
        bool 'Support Sync Clock: 8KHz' BRCM_TIME_SYNC_8KHZ

        # Sync Signal: PON Unstable
        bool 'Support Sync Signal: PON Unstable' BRCM_TIME_SYNC_PON_UNSTABLE
    fi
fi

bool 'LIBJSONC library '  BUILD_LIBJSONC 
bool 'LIBXML2 library '  BUILD_LIBXML2 
bool 'LIBSQLite library ' BUILD_LIBSQLITE 
bool 'LIBCAP library ' BUILD_LIBCAP


bool 'Userspace Stack Smashing Protection support' BRCM_USER_SSP
if [ "$BRCM_USER_SSP" = "y" ]; then
  
  choice 'Select the Stack Smashing Protection Coverage Level'   \
     "Minmum  BRCM_SSP_LEVEL_MIN \
      Typical BRCM_SSP_LEVEL_TYP \
      Maximum BRCM_SSP_LEVEL_MAX" Minmum
fi

bool '[experimental] Support Linux Containers (LXC)' BUILD_LXC

bool 'QR Code Support' BUILD_QRCODE

if [ "$BRCM_63138" = "y" -o "$BRCM_4908" = "y" ]; then
  bool 'M2M DMA Support' BRCM_DRIVER_M2M_DMA
fi

bool 'Recvfile support' BUILD_BCM_RECVFILE

bool 'wget speed test' BCM_SPEEDYGET

bool ' Openvswitch' BUILD_OPENVSWITCH

endmenu

##########################################################################

mainmenu_option next_comment
comment 'WPAN Features'

bool 'Bluetooth Library' BUILD_BLUETOOTH_LIB
if [ "$BUILD_BLUETOOTH_LIB" = "y" ]; then
  tristate '    Bluetooth USB Driver' BRCM_DRIVER_BLUETOOTH_USB
  string   '    Bluetooth Firmware' BRCM_BLUETOOTH_FIRMWARE_FILE
fi

bool 'NFC Library' BUILD_NFC_LIB

if [ "$BUILD_NFC_LIB" = "y" ]; then
  if [ "$BRCM_63138" = "y" -o "$BRCM_63148" = "y" ]; then
    tristate '    Broadcom NFC HW I2C Driver' BRCM_DRIVER_NFC
  fi

  choice ' NFC application'    \
    "nfcapp  BRCM_NFCAPP_NFCAPP   \
     nfcd    BRCM_NFCAPP_NFCD     \
     tap     BRCM_NFCAPP_TAP      \
     none    BRCM_NFCAPP_NONE" none

  if [ "$BRCM_NFCAPP_NFCAPP" = "y" ]; then
    define_string BUILD_NFC_APP "nfcapp"
  elif [ "$BRCM_NFCAPP_NFCD" = "y" ]; then
    define_string BUILD_NFC_APP "nfcd"
  elif [ "$BRCM_NFCAPP_TAP"  = "y" ]; then
    define_string BUILD_NFC_APP "tap"
  else
    define_string BUILD_NFC_APP ""
  fi

  if [ "$BUILD_NFC_APP" = "nfcd" -o "$BUILD_NFC_APP" = "tap" ]; then
    comment 'Note: This NFC application requires WLAN'
    comment 'support (Wi-Fi) to also be enabled'
  fi
fi

endmenu

###################################################################################

mainmenu_option next_comment
comment 'Management Protocols and User Interface Selection'

bool 'SERIAL Port Driver' BRCM_DRIVER_SERIAL

bool 'consoled' BUILD_CONSOLED

bool 'Support Menu Driven Interface' BUILD_CLI_MENU
bool 'Support Command Line Interface' BUILD_CLI_CMD

if [ "$BRCM_DRIVER_FAP" = "y" -o "$BRCM_DRIVER_FAP" = "m" ]; then
     bool ' FAP CLI Support' BUILD_FAPCTL
fi

if [ "$BRCM_DRIVER_RDPA" = "y" -o "$BRCM_DRIVER_RDPA" = "m" ]; then
     bool ' RDPA CLI Support' BUILD_RDPACTL
fi

if [ "$BRCM_DRIVER_ARL" = "y" -o "$BRCM_DRIVER_ARL" = "m" ]; then
     bool ' ARL CLI Support' BUILD_ARLCTL
fi

# Hmm, we only ask about telnetd and sshd if CLI is built,
# but we ask about consoled even when there is no CLI.
# Should telnetd and sshd also be independent of the CLI?
if [ "$BUILD_CLI_MENU" = "y" -o "$BUILD_CLI_CMD" = "y" ]; then
    bool '   Telnet' BUILD_TELNETD
    bool '   SSHD (Secure Shell Server)' BUILD_SSHD
    if [ "$BUILD_SSHD" = "y" ]; then
        bool '      SSHD Key Generation on target' BUILD_SSHD_MIPS_GENKEY
    fi
    int '   Maximum Sessions for Telnet and SSH(BSD Pseudo Terminals)' BRCM_MAX_BSD_PTP
fi


choice ' httpd'   \
      "basic          BUILD_HTTPD \
       SSL            BUILD_HTTPD_SSL \
       basic+SSL      BUILD_HTTPD_BASIC_SSL \
       none           BUILD_HTTPD_none" none

if [ "$BUILD_HTTPD" = "y" -o "$BUILD_HTTPD_SSL" = "y" ]; then
  bool '       Display HTML page in pop-up window' WEB_POPUP
fi
if [ "$BUILD_HTTPD" = "y" -o "$BUILD_HTTPD_SSL" = "y" -o "$BUILD_HTTPD_BASIC_SSL" = "y" ] && [ "$BUILD_ATMWAN" = "y" ]; then
  bool '       Quick Setup' BUILD_QUICKSETUP
else
  define_bool BUILD_QUICKSETUP "n"
fi

bool ' CPU & Memory Web Page'  BRCM_CPU_MEMORY_WEB_PAGE

mainmenu_option next_comment
comment 'WebUI language selection'

choice 'Supported language'     \
      "English                   BRCM_LANG_EN     \
       Simplified_Chinese        BRCM_LANG_CN     \
       Traditional_Chinese       BRCM_LANG_TW     \
       Korean                    BRCM_LANG_KR " English
if [ "$BRCM_LANG_EN" = "y" ]; then
    define_string BRCM_WEBUI_LANG "en_US"
fi
if [ "$BRCM_LANG_CN" = "y" ]; then
    define_string BRCM_WEBUI_LANG "zh_CN"
fi
if [ "$BRCM_LANG_TW" = "y" ]; then
    define_string BRCM_WEBUI_LANG "zh_TW"
fi
if [ "$BRCM_LANG_KR" = "y" ]; then
    define_string BRCM_WEBUI_LANG "ko_KR"
fi
endmenu


choice ' TR69 Management protocol'   \
      "TR69                                      MGMT_TR69C \
       TR69_BCM_SSL                              MGMT_TR69C_BCM_SSL \
       TR69_SSL                                  MGMT_TR69C_SSL \
       none                                      MGMT_none" none

if [ "$MGMT_TR69C" = "y" ]; then
  define_string BUILD_TR69C "dynamic"
else
  define_string BUILD_TR69C ""
fi

if [ "$MGMT_TR69C_SSL" = "y" ]; then
  define_string BUILD_TR69C_SSL "dynamic"
else
  define_string BUILD_TR69C_SSL ""
fi

if [ "$MGMT_TR69C_BCM_SSL" = "y" ]; then
  define_string BUILD_TR69C_BCM_SSL "dynamic"
  string "Certificate file" BRCM_CERT_FILE
else
  define_string BUILD_TR69C_BCM_SSL ""
  define_string BRCM_CERT_FILE ""
fi

if [ "$MGMT_TR69C_SSL" = "y" -o "$MGMT_TR69C" = "y" -o "$MGMT_TR69C_BCM_SSL" = "y" ]; then
  bool '       BRCM_PROPRIETARY' BUILD_TR69_XBRCM
  bool '       RPC_UPLOAD' BUILD_TR69_UPLOAD
  bool '       RPC_QUEUED_TRANSFERS' BUILD_TR69_QUEUED_TRANSFERS
  bool '       TR143' BUILD_TR69_TR143
  bool '       TR157 Periodic Statistics Support' BUILD_TR69_PERIODIC_STATISTICS
  bool '       VENDOR SPECIFIC RPC' BUILD_TR69_VENDOR_RPC
  bool '       RPC_AUTONOMOUS_TRANSFER_COMPLETE' BUILD_TR69_AUTONOMOUS_TRANSFER_COMPLETE_RPC
  bool '       TR111_PART2 (STUN)' BUILD_STUN
  bool '       PROFILE_SUPPORTED_DATA_MODEL' BUILD_PROFILE_SUPPORTED_DATA_MODEL
fi

bool ' Extensible Messaging and Presence Protocol (XMPP)' BUILD_XMPP

bool ' AllJoyn' BUILD_ALLJOYN

bool ' UPnP IGD and HTTP Connection Requests' BUILD_UPNP_IGD_HTTP_CONNREQ


tristate2 ' SNMP Management protocol ' BUILD_SNMP
  if [ "$BUILD_SNMP" == "dynamic" -o "$BUILD_SNMP" == "static" ]; then
       bool '       set operation'  BUILD_SNMP_SET
#       bool '       ADSL mib' BUILD_SNMP_ADSL_MIB
#       bool '       AT mib' BUILD_SNMP_AT_MIB
#       bool '       ATM mib' BUILD_SNMP_ATM_MIB
       bool '       qBridge and pBridge mib' BUILD_SNMP_BRIDGE_MIB
#       bool '       ICMP mib' BUILD_SNMP_ICMP_MIB
#       bool '       IP mib' BUILD_SNMP_IP_MIB
       bool '       SNMP mib' BUILD_SNMP_SNMP_MIB
       bool '       SYSOR mib' BUILD_SNMP_SYSOR_MIB
#       bool '       TCP mib' BUILD_SNMP_TCP_MIB
#       bool '       UDP mib' BUILD_SNMP_UDP_MIB
       bool '       UDP transport' BUILD_SNMP_UDP
#       bool '       EOC transport' BUILD_SNMP_EOC
#       bool '       AAL5 transport' BUILD_SNMP_AAL5
#       bool '       AUTO transport' BUILD_SNMP_AUTO
       bool '       CT CPE mib' BUILD_SNMP_CHINA_TELECOM_CPE_MIB
#       bool '       BRCM CPE mib' BUILD_SNMP_BRCM_CPE_MIB
#       bool '       SNMP debug' BUILD_SNMP_DEBUG
       if [ "$BUILD_SNMP_DEBUG" = "y" ]; then
             bool '       Transport debug' BUILD_SNMP_TRANSPORT_DEBUG
             bool '       SNMP layer debug' BUILD_SNMP_LAYER_DEBUG
       fi
  fi



bool ' TR64 Application ' BUILD_TR64

if  [ "$BUILD_TR64" = "y" ]; then

  bool '       Layer3Forwarding' BUILD_TR64_LAYER3
  bool '       DeviceInfo' BUILD_TR64_DEVICEINFO
  bool '       DeviceConfig' BUILD_TR64_DEVICECONFIG
  bool '       ManagementServer' BUILD_TR64_MANAGEMENTSERVER
  bool '       Time' BUILD_TR64_TIME
  bool '       QueueManagement' BUILD_TR64_QUEUEMANAGEMENT
  bool '       Layer2Bridging' BUILD_TR64_LAYER2BRIDGE
  bool '       LANHostConfigMgmt' BUILD_TR64_LANHOSTCONFIGMGMT
  bool '       LANEthInterfaceConfig' BUILD_TR64_LANETHINTERFACECONFIG
  bool '       WLANConfig' BUILD_TR64_WLANCONFIG
  bool '       USBInterfaceConfig' BUILD_TR64_LANUSBINTERFACECONFIG
  bool '       LANHosts' BUILD_TR64_LANHOSTS
  bool '       WANCommonInterface' BUILD_TR64_WANCOMMONINTERFACE
  bool '       WANDslInterface' BUILD_TR64_WANDSLINTERFACE
#  bool '       WANEthernetConfig' BUILD_TR64_WANETHERNETCONFIG
  bool '       WANDslConnectionMgmt' BUILD_TR64_WANDSLCONNECTIONMGMT
  bool '       WANDslDiagnostics' BUILD_TR64_WANDSLDIAGNOSTICS
  bool '       WANDslLinkConfig' BUILD_TR64_WANDSLLINKCONFIG
  bool '       WANCableLinkConfig' BUILD_TR64_WANCABLELINKCONFIG
#  bool '       WANEthernetLinkConfig' BUILD_TR64_WANETHERNETLINKCONFIG
  bool '       WANIPConnection' BUILD_TR64_WANIPCONNECTION
  bool '       WANPPPConnection' BUILD_TR64_WANPPPCONNECTION
  bool '       IPPingDiagnostics' BUILD_TR64_IPPINGDIAG
  bool '       WANATMF5LoopbackDiagnostics' BUILD_TR64_WANATMF5LOOPBACKDIAG

fi


tristate2 'UPNP' BUILD_UPNP

bool 'Hashed Passwords' BUILD_HASHED_PASSWORDS

endmenu

###################################################################################

mainmenu_option next_comment
comment 'Debug selection'



bool 'BUZZZ: Broadcom Analyzer Tool' BUZZZ
if [ "$BUZZZ" = "y" ]; then
    bool '  Enable function call tracing' BUZZZ_FUNC
    bool '  Enable performance monitoring' BUZZZ_PMON
    bool '  Enable Kernel Event call tracing' BUZZZ_KEVT
    define_string BUILD_BUZZZ "y"
    define_string BRCM_KTOOLS "y"
fi


bool 'Enable PMANPMON: Poor Mans Performance Monitor' BRCM_PMON
if [ "$BRCM_PMON" = "y" ]; then
   define_string BUILD_PMON "y"
   define_string BRCM_KTOOLS "y"
fi

bool 'Enable BOUNCE: kernel function call tracing' BRCM_BOUNCE
if [ "$BRCM_BOUNCE" = "y" ]; then
   bool '  Enable function exit tracing, indentation' BRCM_BOUNCE_EXIT
   bool '  Enable data path subsystems tracing' BRCM_BOUNCE_DATAPATH
   define_string BUILD_BOUNCE "y"
   define_string BRCM_KTOOLS "y"
fi

bool 'Enable kernel tracing' BRCM_KERNEL_FTRACE
if [ "$BRCM_KERNEL_FTRACE" = "y" ]; then
   bool '  Enable preemption and irqs off tracing (additional overhead)' BRCM_KERNEL_PREEMPTIRQSOFF_TRACE
fi
if [ "$BRCM_KERNEL_FTRACE" = "y" ]; then
   bool '  Enable function tracing (additional overhead)' BRCM_KERNEL_FUNCTION_TRACE
fi

tristate 'Broadcom Kernel Logging Driver' BRCM_DRIVER_LOG
bool 'Enable KALLSYMS in kernel' BRCM_KERNEL_KALLSYMS
bool 'Support GDB in kernel' BRCM_KERNEL_DEBUG
tristate2 'Network Transmit/Receive Utility (TTCP)' BUILD_EPITTCP
bool 'Enable Kernel CONFIG_PRINTK and CONFIG_BUG' ENABLE_PRINTK_AND_BUG
if [ "$ENABLE_PRINTK_AND_BUG" = "y" ]; then
    int '  Default console printk level' BCM_DEFAULT_CONSOLE_LOGLEVEL
    bool '  Include timestamp in printk' BCM_PRINTK_TIME
fi
bool 'Enable Colorized Prints' BCM_COLORIZE_PRINTS
bool 'Enable Asserts' BCM_ASSERTS
if [ "$BCM_ASSERTS" = "y" ]; then
    bool '  Enable Fatal Asserts' BCM_FATAL_ASSERTS
fi
bool 'Enable Linux Kernel Hacking/Debug Features' BCM_KERNEL_HACKING
if [ "$BCM_KERNEL_HACKING" = "y" ]; then
    bool '  Enable Spinlock Debug' BCM_DEBUG_SPINLOCK
    bool '  Enable Mutex Debug' BCM_DEBUG_MUTEXES
    bool '  Enable RCU Stall Detector' BCM_RCU_CPU_STALL_DETECTOR
    bool '  Enable Preemption Debugging' BCM_DEBUG_PREEMPT
    bool '  Enable SLAB Debugging' BCM_DEBUG_SLAB
    bool '  Enable Scheduler Stats' BCM_SCHEDSTATS
    bool '  Enable Scheduler Debug' BCM_SCHED_DEBUG
    bool '  Enable Sleep While Atomic Checks' BCM_DEBUG_ATOMIC_SLEEP
fi
bool 'Enable BCM Scheduler Audit' BCM_BCM_SCHEDAUDIT
bool 'Enable Magic SysRq' BCM_MAGIC_SYSRQ

bool 'Enable Memory Diagnostic Tools in Kernel' BRCM_KERNEL_VMTOOLS
bool 'Enable Cache Stats Tool in Kernel' BRCM_KERNEL_CSTAT
bool 'Build for IKOS simulation (experimental)' BRCM_IKOS
tristate 'Broadcom PROF Driver' BRCM_DRIVER_BCMPROF
bool 'Enable Debug Tools' BUILD_DEBUG_TOOLS
bool 'Build GDBserver for application debugging' BUILD_GDBSERVER
bool 'Enable application core dumps' ENABLE_APP_COREDUMPS
bool 'Enable CMS Security Logging' CMS_SECURITY_LOG
bool 'Enable CMS Debug Logging' CMS_LOG_DEBUG
if [ "$CMS_LOG_DEBUG" = "y" ]; then
   choice ' Debug Log level' \
       "1  CMS_LOG_LEVEL_1 \
        2  CMS_LOG_LEVEL_2" 2
bool 'Enable CMS Startup Debug' CMS_STARTUP_DEBUG
fi
bool 'Enable CMS Action Logging' CMS_ACTION_LOG
bool 'Enable CMS Memory Boundary Checking' CMS_MEM_BOUNDARY_CHECK
bool 'Enable CMS Memory Poison Allocs and Frees' CMS_MEM_POISON_ALLOC_FREE
bool 'Enable CMS Memory Leak Tracing' CMS_MEM_LEAK_TRACING
bool 'Enable CMS Asserts' CMS_FATAL_ASSERT
bool 'Bypass CMS Login' CMS_BYPASS_LOGIN

# it should be tristate in the future
bool 'Soap server' BUILD_SOAP
if [ "$BUILD_SOAP" = "y" ]; then
   choice ' Soap server version' \
       "3.0  BRCM_APP_SOAP_V3 \
        2.0  BRCM_APP_SOAP_V2 \
        1.5  BRCM_APP_SOAP_V1" 3.0
   if [ "$BRCM_APP_SOAP_V1" = "y" ]; then
      define_int BUILD_SOAP_VER 1
   fi
   if [ "$BRCM_APP_SOAP_V2" = "y" ]; then
      define_int BUILD_SOAP_VER 2
   fi
   if [ "$BRCM_APP_SOAP_V3" = "y" ]; then
      define_int BUILD_SOAP_VER 3
   fi
fi

tristate2 'Chip Diagnostic Utility' BUILD_DIAGAPP

bool 'Enable OpenSSL speed and multi-process Dhrystone (for SMP profiling)' BENCHMARKS_SMP
bool 'Build SYSSTAT family of utilities (mpstat, iostat, pidstat, sar, etc)' BUILD_SYSSTAT
bool 'Build Stress app and scripts' BUILD_STRESS
bool 'Build POSIX stress utility' BUILD_POSIX_STRESS
bool 'Build lmbench suite (note publication restrictions)' BUILD_LMBENCH
bool 'Build tcpdump (implies libpcap)' BUILD_TCPDUMP
bool 'Build sendpackets raw packet generator (implies libpcap)' BUILD_SENDPACKETS
bool 'Build Iperf traffic generator ' BUILD_IPERF
bool 'Build PCI utilities ' BUILD_PCIUTILS
bool 'Build system call tracer (strace)' BUILD_STRACE
bool 'Build with executable stack disabled' BUILD_DISABLE_EXEC_STACK

choice ' Restrict memory available for use ' \
       "   AUTO              BRCM_MEMORY_RESTRICTION_OFF \
           16M                BRCM_MEMORY_RESTRICTION_16M \
           32M                BRCM_MEMORY_RESTRICTION_32M \
           64M                BRCM_MEMORY_RESTRICTION_64M "



bool 'Enable spictl SPI SLAVE DEVICE TEST' BUILD_SPICTL

bool 'Enable websocket tests (wstest.html)' BUILD_WEB_SOCKETS_TEST

bool 'Enable HomePlug extended debug' BUILD_HOMEPLUG_DEBUG

bool 'Disable TR-181 HomePlug SNR per tones' BRCM_HOMEPLUG_NO_SNR_ASCII

if [ "$BRCM_63138" = "y" -o "$BRCM_63148" = "y" -o "$BRCM_4908" = "y" -o "$BRCM_6858" = "y" ]; then
    tristate 'Build sysperf tool' BRCM_DRIVER_SYSPERF
    if [ "$BRCM_DRIVER_SYSPERF" = "y" -o "$BRCM_DRIVER_SYSPERF" = "m" ]; then
         define_int BUILD_SYSPERFCTL 1
    fi
fi

endmenu

